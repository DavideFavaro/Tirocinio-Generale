openapi: 3.0.2
info:
  title: API Reference
  description: >
    This page contains the documentation on how to use sentinel hub services
    through API calls.


    > Note: This documentation is not complete
  version: 1.0.0
  contact:
    name: Sentinel Hub
servers:
  - url: https://services.sentinel-hub.com
components:
  securitySchemes:
    OAuth2:
      type: oauth2
      description: >
        ### Authentication


        More about the authentication <a
        href="https://docs.sentinel-hub.com/api/latest/api/overview/authentication/"
        target="_blank">here</a>.


        To get an access token using curl:


        ```

        curl --request POST \
          --url https://services.sentinel-hub.com/oauth/token \
          --header "content-type: application/x-www-form-urlencoded" \
          --data "grant_type=client_credentials&client_id=<your client id>&client_secret=<your client secret>"
        ```
      flows:
        clientCredentials:
          tokenUrl: https://services.sentinel-hub.com/oauth/token
          scopes:
            SH: Sentinel Hub
        implicit:
          authorizationUrl: https://services.sentinel-hub.com/oauth/auth
          scopes:
            SH: Sentinel Hub
  parameters:
    SearchBeanSearch:
      name: search
      description: >-
        Optional search query. Either a single word to search for or multiple
        words separated by the `|` (or) and `&` (and) operators. If omitted, all
        items are returned.
      in: query
      schema:
        type: string
    SearchBeanCount:
      name: count
      description: >-
        Upper limit to the number of items to retrieve. An endpoint-specific
        default is used if omitted.
      in: query
      schema:
        type: integer
        format: int32
    SearchBeanViewtoken:
      name: viewtoken
      description: >-
        When total number of items is larger than *count*, the response contains
        *viewtoken*. This *viewtoken* can be used in the next request to
        retrieve the next page of items.
      in: query
      schema:
        type: string
    SearchBeanSort:
      name: sort
      description: sort
      in: query
      schema:
        type: string
    BatchRequestId:
      name: requestId
      description: Request ID
      in: path
      required: true
      schema:
        type: string
        format: uuid
    BatchCollectionId:
      name: collectionId
      description: Collection ID
      in: path
      required: true
      schema:
        type: string
        format: uuid
    BatchTileId:
      name: tileId
      description: Tile ID
      in: path
      required: true
      schema:
        type: integer
        format: int64
    BatchTilinggridsId:
      name: id
      description: Tilinggrids ID
      in: path
      required: true
      schema:
        type: integer
        format: int64
    OrderId:
      name: orderId
      description: Order ID
      in: path
      required: true
      schema:
        type: string
        format: uuid
    OrderStatus:
      name: status
      description: Filter orders by status. Omit to get all orders.
      in: query
      schema:
        $ref: '#/components/schemas/OrderStatus'
    DeliveryId:
      name: deliveryId
      description: Delivery ID
      in: path
      required: true
      schema:
        type: string
        format: uuid
    Provider:
      name: provider
      description: Data Provider
      in: path
      required: true
      schema:
        type: string
        enum:
          - AIRBUS
          - PLANET
    TpdiCollectionId:
      name: collectionId
      description: Collection ID
      in: path
      required: true
      schema:
        type: string
        enum:
          - AIRBUS_PLEIADES
          - AIRBUS_SPOT
          - PLANET_SCOPE
          - MAXAR_WORLDVIEW
    DeliveryStatus:
      name: status
      description: Filter deliveries by status. Omit to get all deliveries.
      in: query
      schema:
        $ref: '#/components/schemas/DeliveryStatus'
    ByocCollectionId:
      name: collectionId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    ByocTileId:
      name: tileId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    ConfigurationDatasetType:
      name: datasetType
      description: Dataset type
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/DatasetType'
    ConfigurationDataproductId:
      name: id
      description: Dataproduct ID
      in: path
      required: true
      schema:
        type: integer
        format: int64
    ConfigurationDatasetId:
      name: datasetId
      description: Dataset ID
      in: path
      required: true
      schema:
        type: string
    ConfigurationDatasetSourceId:
      name: id
      description: Dataset source ID
      in: path
      required: true
      schema:
        type: integer
        format: int64
    WmsInstanceId:
      name: instanceId
      description: Instance ID
      in: path
      required: true
      schema:
        type: string
        format: uuid
    WmsLayerId:
      name: layerId
      description: Layer ID
      in: path
      required: true
      schema:
        type: string
    bbox:
      name: bbox
      in: query
      description: >-
        Only features that have a geometry that intersects the bounding box are
        selected.

        The bounding box is provided as four or six numbers, depending on

        whether the coordinate reference system includes a vertical axis (height

        or depth):


        * Lower left corner, coordinate axis 1

        * Lower left corner, coordinate axis 2

        * Minimum value, coordinate axis 3 (optional)

        * Upper right corner, coordinate axis 1

        * Upper right corner, coordinate axis 2

        * Maximum value, coordinate axis 3 (optional)


        The coordinate reference system of the values is WGS 84

        longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84).


        For WGS 84 longitude/latitude the values are in most cases the sequence

        of minimum longitude, minimum latitude, maximum longitude and maximum

        latitude. However, in cases where the box spans the antimeridian the

        first value (west-most box edge) is larger than the third value

        (east-most box edge).


        If the vertical axis is included, the third and the sixth number are

        the bottom and the top of the 3-dimensional bounding box.


        If a feature has multiple spatial geometry properties, it is the

        decision of the server whether only a single spatial geometry property

        is used to determine the extent or all relevant geometries.


        Example: The bounding box of the New Zealand Exclusive Economic Zone in

        WGS 84 (from 160.6째E to 170째W and from 55.95째S to 25.89째S) would be

        represented in JSON as `[160.6, -55.95, -170, -25.89]` and in a query as

        `bbox=160.6,-55.95,-170,-25.89`.
      required: false
      schema:
        type: array
        minItems: 4
        maxItems: 6
        items:
          type: number
      style: form
      explode: false
    collectionId:
      name: collectionId
      in: path
      description: local identifier of a collection
      required: true
      schema:
        type: string
    datetime:
      name: datetime
      in: query
      description: >-
        Either a date-time or an interval, open or closed. Date and time
        expressions

        adhere to RFC 3339. Open intervals are expressed using double-dots.


        Examples:


        * A date-time: "2018-02-12T23:20:50Z"

        * A closed interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"

        * Open intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"


        Only features that have a temporal property that intersects the value of

        `datetime` are selected.


        If a feature has multiple temporal properties, it is the decision of the

        server whether only a single temporal property is used to determine

        the extent or all relevant temporal properties.
      required: false
      schema:
        type: string
      style: form
      explode: false
    featureId:
      name: featureId
      in: path
      description: local identifier of a feature
      required: true
      schema:
        type: string
    limit:
      name: limit
      in: query
      description: >-
        The optional limit parameter limits the number of items that are
        presented in the response document.


        Only items are counted that are on the first level of the collection in
        the response document.

        Nested objects contained within the explicitly requested items shall not
        be counted.


        Minimum = 1. Maximum = 100. Default = 10.
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
      style: form
      explode: false
    ids:
      name: ids
      in: query
      description: |-
        Array of Item ids to return. All other filter parameters that further
        restrict the number of search results are ignored
      required: false
      schema:
        $ref: '#/components/schemas/ids'
      explode: false
    collectionsArray:
      name: collections
      in: query
      description: |
        Array of Collection IDs to include in the search for items.
        Only Items in one of the provided Collections will be searched
      required: false
      schema:
        $ref: '#/components/schemas/collectionsArray'
      explode: false
    next:
      name: next
      in: query
      description: The token to retrieve the next set of results
      required: false
      schema:
        $ref: '#/components/schemas/next'
      style: form
    fields:
      name: fields
      in: query
      description: Determines the shape of the features in the response
      required: false
      schema:
        type: string
        example: id,type,-geometry,bbox,properties,-links,-assets
      style: form
      explode: false
  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RestErrorWrapper'
    '401':
      description: Unauthorized
    '403':
      description: Insufficient permissions
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RestErrorWrapper'
    '409':
      description: Conflict in the request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RestErrorWrapper'
    '500':
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RestErrorWrapper'
    LandingPage:
      description: |-
        The landing page provides links to the API definition
        (link relations `service-desc` and `service-doc`),
        the Conformance declaration (path `/conformance`,
        link relation `conformance`), and the Feature
        Collections (path `/collections`, link relation
        `data`).

        Links to the search endpoints (path `/search`, link relation `search`,
        method `GET` or `POST`) are **required** to be specified if the API
        implements `/search` for any of the specified HTTP methods.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/landingPage'
          example:
            title: NAIP Imagery
            description: Catalog of NAIP Imagery.
            links:
              - href: http://data.example.org/
                rel: self
                type: application/json
                title: this document
              - href: http://data.example.org/api
                rel: service-desc
                type: application/vnd.oai.openapi+json;version=3.0
                title: the API definition
              - href: http://data.example.org/api.html
                rel: service-doc
                type: text/html
                title: the API documentation
              - href: http://data.example.org/conformance
                rel: conformance
                type: application/json
                title: OGC API conformance classes implemented by this server
              - href: http://data.example.org/collections
                rel: data
                type: application/json
                title: Information about the feature collections
              - href: http://data.example.org/search
                rel: search
                type: application/json
                title: Search across feature collections
            stac_version: 0.9.0
            id: naip
        text/html:
          schema:
            type: string
    ConformanceDeclaration:
      description: |-
        The URIs of all conformance classes supported by the server.

        To support "generic" clients that want to access multiple
        OGC API Features implementations - and not "just" a specific
        API / server, the server declares the conformance
        classes it implements and conforms to.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/confClasses'
          example:
            conformsTo:
              - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core
              - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30
              - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/html
              - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson
        text/html:
          schema:
            type: string
    Collections:
      description: >-
        The feature collections shared by this API.


        The dataset is organized as one or more feature collections. This
        resource

        provides information about and access to the collections.


        The response contains the list of collections. For each collection, a
        link

        to the items in the collection (path
        `/collections/{collectionId}/items`,

        link relation `items`) as well as key information about the collection.

        This information includes:


        * A local identifier for the collection that is unique for the dataset;

        * A list of coordinate reference systems (CRS) in which geometries may
        be returned by the server. The first CRS is the default coordinate
        reference system (the default is always WGS 84 with axis order
        longitude/latitude);

        * An optional title and description for the collection;

        * An optional extent that can be used to provide an indication of the
        spatial and temporal extent of the collection - typically derived from
        the data;

        * An optional indicator about the type of the items in the collection
        (the default value, if the indicator is not provided, is 'feature').
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/collections'
        text/html:
          schema:
            type: string
    Collection:
      description: >-
        Information about the feature collection with id `collectionId`.


        The response contains a link to the items in the collection

        (path `/collections/{collectionId}/items`, link relation `items`)

        as well as key information about the collection. This information

        includes:


        * A local identifier for the collection that is unique for the dataset;

        * A list of coordinate reference systems (CRS) in which geometries may
        be returned by the server. The first CRS is the default coordinate
        reference system (the default is always WGS 84 with axis order
        longitude/latitude);

        * An optional title and description for the collection;

        * An optional extent that can be used to provide an indication of the
        spatial and temporal extent of the collection - typically derived from
        the data;

        * An optional indicator about the type of the items in the collection
        (the default value, if the indicator is not provided, is 'feature').
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/collection'
        text/html:
          schema:
            type: string
    Features:
      description: >-
        The response is a document consisting of features in the collection.

        The features included in the response are determined by the server

        based on the query parameters of the request. To support access to

        larger collections without overloading the client, the API supports

        paged access with links to the next page, if more features are selected

        that the page size.


        The `bbox` and `datetime` parameter can be used to select only a

        subset of the features in the collection (the features that are in the

        bounding box or time interval). The `bbox` parameter matches all
        features

        in the collection that are not associated with a location, too. The

        `datetime` parameter matches all features in the collection that are

        not associated with a time stamp or interval, too.


        The `limit` parameter may be used to control the subset of the

        selected features that should be returned in the response, the page
        size.

        Each page may include information about the number of selected and

        returned features (`numberMatched` and `numberReturned`) as well as

        links to support paging (link relation `next`).
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/featureCollectionGeoJSON'
        text/html:
          schema:
            type: string
    Feature:
      description: |-
        fetch the feature with id `featureId` in the feature collection
        with id `collectionId`
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/item'
        text/html:
          schema:
            type: string
    InvalidParameter:
      description: A query parameter has an invalid value.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/exception'
        text/html:
          schema:
            type: string
    NotFound:
      description: The requested URI was not found.
    ServerError:
      description: A server error occurred.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/exception'
        text/html:
          schema:
            type: string
  schemas:
    Boom:
      type: object
      properties:
        status:
          description: HTTP status code
          type: integer
          format: int32
        reason:
          description: Reason for the error
          type: string
        message:
          description: Friendly error message
          type: string
        code:
          description: Code that uniquely identifies the error
          type: string
          enum:
            - COMMON_BAD_PAYLOAD
            - COMMON_NOT_FOUND
            - COMMON_DATABASE_ERROR
            - COMMON_UNIQUE_KEY_VIOLATION
            - COMMON_INSUFFICIENT_PERMISSIONS
            - COMMON_SENTINEL_ACCOUNT_EXPIRED
            - COMMON_METHOD_NOT_ALLOWED
            - COMMON_UNSUPPORTED_MEDIA_TYPE
            - COMMON_ELASTICSEARCH_ERROR
            - COMMON_UNAUTHORIZED
            - COMMON_EXCEPTION
            - RATE_LIMIT_STORAGE_TIMEOUT
            - RATE_LIMIT_OVERLAPPING_POLICIES
            - RATE_LIMIT_EXCEEDED
            - RATE_LIMIT_TOKEN_COUNT_EXCEEDS_CAPACITY
            - DASHBOARD_PAYPAL_SALE_ERROR
            - DASHBOARD_PAYPAL_SUBSCRIPTION_ERROR
            - DASHBOARD_INVALID_PAYPAL_RESPONSE
            - DASHBOARD_EXECUTE_SALE_ERROR
            - DASHBOARD_EXECUTE_AGREEMENT_ERROR
            - DASHBOARD_IPN_ERROR
            - DASHBOARD_ADYEN_SALE_ERROR
            - DASHBOARD_ADYEN_PAYMENT_CANCELLED
            - RENDERER_EXCEPTION
            - OAUTH_ERROR
            - EMAIL_OCTOPUS_ERROR
        errors:
          description: Additional information about the error (Optional)
          type: object
    RestErrorWrapper:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Boom'
    DatasetType:
      type: string
      enum:
        - S2L1C
        - S2L2A
        - L8L1C
        - LOTL1
        - LOTL2
        - DEM
        - MODIS
        - S1GRD
        - S2GM
        - S3OLCI
        - S3SLSTR
        - S5PL2
        - CUSTOM
    Interpolator:
      type: string
      enum:
        - BILINEAR
        - BICUBIC
        - LANCZOS
        - BOX
        - NEAREST
    DateTimeInterval:
      type: object
      properties:
        from:
          type: string
          description: >-
            ISO-8601 time representing start of search interval, e.g.
            2019-01-31T14:00:00+01:00
          format: date-time
        to:
          type: string
          description: >-
            ISO-8601 time representing end of search interval, e.g.
            2019-02-05T15:00:00+01:00.
          format: date-time
    Geometry:
      description: >-
        The request area of interest geometry. This and/or BBOX must be
        specified. Coordinates need to be in easting,northing or
        longitude,latitude, in that order in the CRS defined in the
        "bounds.properties.crs" parameter. A GeoJsonObject.
      type: object
      oneOf:
        - $ref: '#/components/schemas/Polygon'
        - $ref: '#/components/schemas/MultiPolygon'
      example:
        type: Polygon
        coordinates:
          - - - 14.000701904296873
              - 46.23685258143992
            - - 13.822174072265625
              - 46.09037664604301
            - - 14.113311767578125
              - 45.85080395917834
            - - 14.55963134765625
              - 46.038922598236
            - - 14.441528320312498
              - 46.28717293114449
            - - 14.17236328125
              - 46.29191774991382
            - - 14.000701904296873
              - 46.23685258143992
    Polygon:
      type: object
      properties:
        type:
          type: string
          enum:
            - Polygon
        coordinates:
          type: array
          items:
            type: array
            items:
              maxItems: 2
              minItems: 2
              type: array
              items:
                type: number
                format: double
    MultiPolygon:
      type: object
      properties:
        type:
          type: string
          enum:
            - MultiPolygon
        coordinates:
          type: array
          items:
            type: array
            items:
              type: array
              items:
                maxItems: 2
                minItems: 2
                type: array
                items:
                  type: number
                  format: double
    View:
      description: Links to paginate the resource
      type: object
      properties:
        currentToken:
          type: string
        nextToken:
          type: string
        previousToken:
          type: string
        '@id':
          type: string
          format: uri
        next:
          type: string
          format: uri
        previous:
          type: string
          format: uri
    ResourceReference:
      type: object
      properties:
        '@id':
          description: Resource URL reference
          type: string
    BaseDataset:
      type: object
      properties:
        type:
          description: Datasource abbreviation
          type: string
        id:
          description: Identifier
          type: string
    S2L1CDataset:
      title: S2L1C
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseDataset'
        - type: object
          properties:
            dataFilter:
              $ref: '#/components/schemas/S2L1CFiltering'
            processing:
              $ref: '#/components/schemas/S2L1CProcessing'
            type:
              type: string
              enum:
                - S2L1C
    S2L2ADataset:
      title: S2L2A
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseDataset'
        - type: object
          properties:
            dataFilter:
              $ref: '#/components/schemas/S2L2AFiltering'
            processing:
              $ref: '#/components/schemas/BaseDatasetProcessing'
            type:
              type: string
              enum:
                - S2L2A
    Ls8Dataset:
      title: L8L1C
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseDataset'
        - type: object
          properties:
            dataFilter:
              $ref: '#/components/schemas/Ls8Filtering'
            processing:
              $ref: '#/components/schemas/BaseDatasetProcessing'
            type:
              type: string
              enum:
                - L8L1C
    L8L1Dataset:
      title: LOTL1
      type: object
      allOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - LOTL1
        - $ref: '#/components/schemas/Ls8Dataset'
    L8L2Dataset:
      title: LOTL2
      type: object
      allOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - LOTL2
        - $ref: '#/components/schemas/Ls8Dataset'
    ModisDataset:
      title: MODIS
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseDataset'
        - type: object
          properties:
            dataFilter:
              $ref: '#/components/schemas/ModisFiltering'
            processing:
              $ref: '#/components/schemas/BaseDatasetProcessing'
            type:
              type: string
              enum:
                - MODIS
    DEMDataset:
      title: DEM
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseDataset'
        - type: object
          properties:
            dataFilter:
              $ref: '#/components/schemas/DEMFiltering'
            processing:
              $ref: '#/components/schemas/DEMProcessing'
            type:
              type: string
              enum:
                - DEM
    S1Dataset:
      title: S1GRD
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseDataset'
        - type: object
          properties:
            dataFilter:
              $ref: '#/components/schemas/S1Filtering'
            processing:
              $ref: '#/components/schemas/S1Processing'
            type:
              type: string
              enum:
                - S1GRD
    S3Dataset:
      title: S3OLCI
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseDataset'
        - type: object
          properties:
            dataFilter:
              $ref: '#/components/schemas/S3OlciFiltering'
            processing:
              $ref: '#/components/schemas/BaseDatasetProcessing'
            type:
              type: string
              enum:
                - S3OLCI
    S3SlstrDataset:
      title: S3SLSTR
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseDataset'
        - type: object
          properties:
            dataFilter:
              $ref: '#/components/schemas/S3SlstrFiltering'
            processing:
              $ref: '#/components/schemas/S3SlstrProcessing'
            type:
              type: string
              enum:
                - S3SLSTR
    S5PDataset:
      title: S5PL2
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseDataset'
        - type: object
          properties:
            dataFilter:
              $ref: '#/components/schemas/S5PFiltering'
            processing:
              $ref: '#/components/schemas/S5PProcessing'
            type:
              type: string
              enum:
                - S5PL2
    BYOCDataset:
      title: BYOC / BATCH
      type: object
      allOf:
        - type: object
          properties:
            dataFilter:
              $ref: '#/components/schemas/BYOCFiltering'
            processing:
              $ref: '#/components/schemas/BaseDatasetProcessing'
            type:
              type: string
              description: >
                For a BYOC collection, set to "byoc-\<collectionId\>", for
                example "byoc-017aa0ae-33a6-45d3-8548-0f7d1041b40c".


                For a BATCH collection, set to "batch-\<collectionId\>", for
                example "batch-9688cd56-6c70-4221-add8-a5821d0256a9".
        - $ref: '#/components/schemas/BaseDataset'
    S2L2AFiltering:
      type: object
      properties:
        timeRange:
          $ref: '#/components/schemas/TimeRange'
        mosaickingOrder:
          description: >-
            The order in which tiles are overlapped from which the output result
            is mosaicked.
          type: string
          enum:
            - mostRecent
            - leastRecent
            - leastCC
          default: mostRecent
        maxCloudCoverage:
          $ref: '#/components/schemas/MaxCloudCoverage'
    S2L1CFiltering:
      allOf:
        - $ref: '#/components/schemas/S2L2AFiltering'
        - type: object
          properties:
            previewMode:
              type: string
              description: >
                The preview mode as defined

                <a
                href="https://docs.sentinel-hub.com/api/latest/data/sentinel-2-l1c/#previewmode"
                target="_blank">here</a>.
              enum:
                - DETAIL
                - PREVIEW
                - EXTENDED_PREVIEW
              default: DETAIL
    Ls8Filtering:
      type: object
      properties:
        timeRange:
          $ref: '#/components/schemas/TimeRange'
        mosaickingOrder:
          description: >-
            The order in which tiles are overlapped from which the output result
            is mosaicked.
          type: string
          enum:
            - mostRecent
            - leastRecent
            - leastCC
          default: mostRecent
        maxCloudCoverage:
          $ref: '#/components/schemas/MaxCloudCoverage'
    ModisFiltering:
      type: object
      properties:
        timeRange:
          $ref: '#/components/schemas/TimeRange'
        mosaickingOrder:
          description: >-
            The order in which tiles are overlapped from which the output result
            is mosaicked.
          type: string
          enum:
            - mostRecent
            - leastRecent
          default: mostRecent
    S1Filtering:
      type: object
      properties:
        timeRange:
          $ref: '#/components/schemas/TimeRange'
        mosaickingOrder:
          description: >-
            The order in which tiles are overlapped from which the output result
            is mosaicked.
          type: string
          enum:
            - mostRecent
            - leastRecent
          default: mostRecent
        resolution:
          type: string
          enum:
            - HIGH
            - MEDIUM
            - FULL
        acquisitionMode:
          type: string
          enum:
            - SM
            - IW
            - EW
            - WV
            - EN
            - AN
            - IM
        polarization:
          type: string
          enum:
            - SH
            - SV
            - DH
            - DV
            - HH
            - HV
            - VV
            - VH
        orbitDirection:
          type: string
          enum:
            - ASCENDING
            - DESCENDING
        timeliness:
          type: string
          enum:
            - NRT10m
            - NRT1h
            - NRT3h
            - Fast24h
            - Offline
            - Reprocessing
            - ArchNormal
    S3OlciFiltering:
      type: object
      properties:
        timeRange:
          $ref: '#/components/schemas/TimeRange'
        mosaickingOrder:
          description: >-
            The order in which tiles are overlapped from which the output result
            is mosaicked.
          type: string
          enum:
            - mostRecent
            - leastRecent
          default: mostRecent
    S3SlstrFiltering:
      type: object
      properties:
        timeRange:
          $ref: '#/components/schemas/TimeRange'
        mosaickingOrder:
          description: >-
            The order in which tiles are overlapped from which the output result
            is mosaicked.
          type: string
          enum:
            - mostRecent
            - leastRecent
            - leastCC
          default: mostRecent
        maxCloudCoverage:
          $ref: '#/components/schemas/MaxCloudCoverage'
        orbitDirection:
          description: Orbit direction.
          type: string
          enum:
            - ASCENDING
            - DESCENDING
    S5PFiltering:
      type: object
      properties:
        timeRange:
          $ref: '#/components/schemas/TimeRange'
        mosaickingOrder:
          description: >-
            The order in which tiles are overlapped from which the output result
            is mosaicked.
          type: string
          enum:
            - mostRecent
            - leastRecent
          default: mostRecent
        timeliness:
          description: Data timeliness.
          type: string
          enum:
            - NRTI
            - OFFL
            - RPRO
    BYOCFiltering:
      type: object
      properties:
        timeRange:
          $ref: '#/components/schemas/TimeRange'
        mosaickingOrder:
          description: >-
            The order in which tiles are overlapped from which the output result
            is mosaicked.
          type: string
          enum:
            - mostRecent
            - leastRecent
          default: mostRecent
    DEMFiltering:
      type: object
      properties:
        demInstance:
          description: Selects DEM instance.
          type: string
          enum:
            - MAPZEN
            - COPERNICUS_30
            - COPERNICUS_90
          default: MAPZEN
    TimeRange:
      type: object
      description: >-
        A time interval to filter data by acquisition date. It is defined by a
        start and end date and time, e.g. 2019-01-31T14:00:00+01:00. A date
        representation without time (e.g. 2019-01-31) will not work. Both the
        start and end of a time interval are inclusive and can be equal.
      properties:
        from:
          description: The start of a search interval.
          type: string
          format: date-time
        to:
          description: The end of a search interval.
          type: string
          format: date-time
      example:
        from: 2018-10-01T00:00:00.000Z
        to: 2018-11-01T00:00:00.000Z
    MaxCloudCoverage:
      description: The maximum allowable cloud coverage in percent.
      type: number
      format: double
      minimum: 0
      maximum: 100
      default: 100
    BaseDatasetProcessing:
      type: object
      properties:
        upsampling:
          description: |
            The interpolation used when the requested
            resolution is higher than the source resolution.
          type: string
          enum:
            - NEAREST
            - BILINEAR
            - BICUBIC
          default: NEAREST
        downsampling:
          description: |
            The interpolation used when the requested
            resolution is lower than the source resolution.
          type: string
          enum:
            - NEAREST
            - BILINEAR
            - BICUBIC
          default: NEAREST
    S2L1CProcessing:
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseDatasetProcessing'
        - type: object
          properties:
            atmosphericCorrection:
              description: Atmospheric correction filter.
              type: string
              enum:
                - NONE
                - DOS1
                - SENCOR
                - STATISTICAL
              default: NONE
    DEMProcessing:
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseDatasetProcessing'
        - type: object
          properties:
            clampNegative:
              type: boolean
              default: false
              description: >-
                Mapzen DEM specific option. It replaces negative orthometric
                heights with 0. Useful for removing ocean bathymetry, for
                example.
            egm:
              type: boolean
              default: false
              description: >-
                It replaces orthometric heights with ellipsoidal heights
                relative to the WGS84 ellipsoid.
    S1Processing:
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseDatasetProcessing'
        - type: object
          properties:
            backCoeff:
              type: string
              enum:
                - BETA0
                - SIGMA0_ELLIPSOID
                - GAMMA0_ELLIPSOID
                - GAMMA0_TERRAIN
              default: GAMMA0_ELLIPSOID
            orthorectify:
              type: boolean
              default: false
            demInstance:
              type: string
              enum:
                - MAPZEN
                - COPERNICUS
                - COPERNICUS_30
                - COPERNICUS_90
              default: MAPZEN
            radiometricTerrainOversampling:
              type: double
              minimum: 1
              maximum: 4
              default: 2
    S3SlstrProcessing:
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseDatasetProcessing'
        - type: object
          properties:
            view:
              description: The satellite view.
              type: string
              enum:
                - NADIR
                - OBLIQUE
              default: NADIR
    S5PProcessing:
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseDatasetProcessing'
        - type: object
          properties:
            minQa:
              description: The minimum (inclusive) pixel quality to be displayed.
              type: integer
              format: int32
              minimum: 0
              maximum: 100
              default: 75 for NO2, 50 for the rest
    ProcessRequest:
      type: object
      required:
        - evalscript
        - input
      properties:
        input:
          $ref: '#/components/schemas/ProcessRequestInput'
        output:
          $ref: '#/components/schemas/ProcessRequestOutput'
        evalscript:
          description: >
            Your evalscript. For details, click

            <a href="https://docs.sentinel-hub.com/api/latest/evalscript/v3/"
            target="_blank">here</a>.
          type: string
    MultiPartProcessRequest:
      type: object
      properties:
        request:
          required:
            - input
          type: object
          properties:
            input:
              $ref: '#/components/schemas/ProcessRequestInput'
            output:
              $ref: '#/components/schemas/ProcessRequestOutput'
        evalscript:
          description: >
            Your evalscript. For details, click

            <a href="https://docs.sentinel-hub.com/api/latest/evalscript/v3/"
            target="_blank">here</a>.
          type: string
    ProcessRequestInput:
      title: Input
      type: object
      required:
        - bounds
        - data
      properties:
        bounds:
          $ref: '#/components/schemas/ProcessRequestInputBounds'
        data:
          $ref: '#/components/schemas/ProcessRequestInputData'
    ProcessRequestInputData:
      description: >
        The collections you wish to request, along with certain processing and
        filtering parameters.

        To learn how to request and work with multiple collection, check the
        "Data Fusion" page in our documentation
        https://docs.sentinel-hub.com/api/latest/data/data-fusion/.
      type: array
      minItems: 1
      items:
        oneOf:
          - $ref: '#/components/schemas/S2L1CDataset'
          - $ref: '#/components/schemas/S2L2ADataset'
          - $ref: '#/components/schemas/Ls8Dataset'
          - $ref: '#/components/schemas/L8L1Dataset'
          - $ref: '#/components/schemas/L8L2Dataset'
          - $ref: '#/components/schemas/ModisDataset'
          - $ref: '#/components/schemas/DEMDataset'
          - $ref: '#/components/schemas/S1Dataset'
          - $ref: '#/components/schemas/S3Dataset'
          - $ref: '#/components/schemas/S3SlstrDataset'
          - $ref: '#/components/schemas/S5PDataset'
          - $ref: '#/components/schemas/BYOCDataset'
    ProcessRequestInputBounds:
      title: Bounds
      description: >
        Defines the request bounds by specifying the bounding box and/or

        geometry for the request. If both are specified it will generate an
        image

        for the bounding box and render data contained within the geometry.
      type: object
      properties:
        bbox:
          description: >
            The request bounding box. This and/or GEOMETRY must be specified.

            Specify with a coordinate pair on two (opposite) vertices of the
            bounding

            box rectangle. Coordinates need to be in easting,northing or
            longitude, latitude,

            in that order in the CRS defined in the "bounds.properties.crs"
            parameter.
          type: array
          minItems: 4
          maxItems: 4
          items:
            type: number
            format: double
          example:
            - 13.822174072265625
            - 45.85080395917834
            - 14.55963134765625
            - 46.29191774991382
        geometry:
          allOf:
            - $ref: '#/components/schemas/Geometry'
        properties:
          $ref: '#/components/schemas/ProcessRequestInputBoundsProperties'
    ProcessRequestInputBoundsProperties:
      title: BoundsProperties
      type: object
      properties:
        crs:
          description: >
            The coordinate reference system of the coordinates. Must be

            one of the values listed at
            https://docs.sentinel-hub.com/api/latest/api/process/crs/.

            Default CRS is WGS84, http://www.opengis.net/def/crs/OGC/1.3/CRS84.
          type: string
          default: http://www.opengis.net/def/crs/OGC/1.3/CRS84
    ProcessRequestOutput:
      type: object
      properties:
        width:
          description: >
            The request image width. Must be an integer between 1 and 2500.

            <br />*Only one pair of parameters "width"/"height" or "resx"/"resy"
            must

            be set at the same time.*
          type: integer
          format: int32
          minimum: 1
          maximum: 2500
          default: 256
          example: 512
        height:
          description: >
            The request image height. Must be an integer between 1 and 2500.

            <br />*Only one pair of parameters "width"/"height" or "resx"/"resy"
            must

            be set at the same time.*
          type: integer
          format: int32
          minimum: 1
          maximum: 2500
          default: 256
          example: 512
        resx:
          description: >
            Spatial resolution of the request image in a horizontal direction.

            Its units are defined by the CRS given in
            "input.bounds.properties.crs"

            parameter. <br />*Only one pair of parameters "width"/"height" or
            "resx"/"resy"

            must be set at the same time.*
          type: number
          format: double
        resy:
          description: >
            Spatial resolution of the request image in a vertical direction.

            Its units are defined by the CRS given in
            "input.bounds.properties.crs"

            parameter. <br />*Only one pair of parameters "width"/"height" or
            "resx"/"resy"

            must be set at the same time.*
          type: number
          format: double
        responses:
          type: array
          description: |
            Response object(s). <br/>
            If you request multiple responses, set the `Accept` header to
            `application/tar`, `application/x-tar` or `multipart/mixed`.
          items:
            $ref: '#/components/schemas/ProcessRequestOutputResponse'
    ProcessRequestOutputResponse:
      type: object
      properties:
        identifier:
          type: string
          description: >
            Response's identifier is used to connect the results of an
            evalscript with the output file.

            Each response identifier value must either match one of the values
            in `setup()` -> `output.id` in the evalscript (see <a
            href="https://docs.sentinel-hub.com/api/latest/data/sentinel-2-l1c/examples/#ndvi-image--and--value-multi-part-response-png-and-geotiff"
            target="_blank">example</a>)

            or be `userdata` (see <a
            href="https://docs.sentinel-hub.com/api/latest/data/sentinel-2-l1c/examples/#true-color-and-metadata-multi-part-response-geotiff-and-json"
            target="_blank">example</a>).
          enum:
            - <identifier>
            - userdata
        format:
          description: Format object (default is `image/png`).
          type: object
          oneOf:
            - $ref: '#/components/schemas/ProcessRequestOutputFormatPng'
            - $ref: '#/components/schemas/ProcessRequestOutputFormatJpeg'
            - $ref: '#/components/schemas/ProcessRequestOutputFormatTiff'
            - $ref: '#/components/schemas/ProcessRequestOutputFormatJson'
    ProcessRequestOutputFormat:
      type: object
      properties:
        type:
          type: string
          description: Output format mime-type
    ProcessRequestOutputFormatJpeg:
      title: image/jpeg
      type: object
      allOf:
        - $ref: '#/components/schemas/ProcessRequestOutputFormat'
        - type: object
          properties:
            quality:
              description: Quality level of JPEG compression.
              type: integer
              format: int32
              minimum: 0
              maximum: 100
              default: 90
            type:
              type: string
              enum:
                - image/jpeg
    ProcessRequestOutputFormatPng:
      title: image/png
      type: object
      allOf:
        - $ref: '#/components/schemas/ProcessRequestOutputFormat'
        - type: object
          properties:
            type:
              type: string
              enum:
                - image/png
    ProcessRequestOutputFormatTiff:
      title: image/tiff
      type: object
      allOf:
        - $ref: '#/components/schemas/ProcessRequestOutputFormat'
        - type: object
          properties:
            type:
              type: string
              enum:
                - image/tiff
    ProcessRequestOutputFormatJson:
      title: application/json
      type: object
      allOf:
        - $ref: '#/components/schemas/ProcessRequestOutputFormat'
        - type: object
          properties:
            type:
              type: string
              enum:
                - application/json
    StatisticalRequest:
      required:
        - processRequest
      type: object
      properties:
        input:
          $ref: '#/components/schemas/ProcessRequestInput'
        aggregation:
          $ref: '#/components/schemas/StatisticalRequestAggregation'
        calculations:
          description: >
            Define which statistics and histogram to calculate. It can be
            specified differently for each evalscript output. 
          type: object
          additionalProperties:
            x-additionalPropertiesName: output name
            allOf:
              - $ref: '#/components/schemas/CalculationDefinition'
    MultiPartStatisticalRequest:
      type: object
      properties:
        request:
          $ref: '#/components/schemas/StatisticalRequest'
        evalscript:
          description: >
            Block of JavaScript code that will replace the evalscript property
            of the statistics request.
          type: string
    Aggregation:
      required:
        - of
      description: |
        Specifies how given time range is split into time intervals.
      type: object
      properties:
        of:
          description: >
            Duration in ISO 8601 duration format, check
            [here](https://docs.sentinel-hub.com/api/latest/api/statistical/#split-requested-timerange-into-multiple-time-intervals)
            for more details. 
          type: string
    CalculationDefinition:
      description: >-
        The name of the output (as key) for which a calculation of statistics
        and histogram are defined below. Each key must match with one of the
        `output.id` specified in a `setup()` function in an evalscript or be
        "default". If it is "default", the specified statistics and histogram
        will be calculated for all outputs, for which calculation of statistics
        is not explicitly defined.
      type: object
      properties:
        histograms:
          description: >
            Histogram definitions. It can be specified differently for each band
            in this output.
          type: object
          additionalProperties:
            x-additionalPropertiesName: band name
            allOf:
              - $ref: '#/components/schemas/HistogramDefinition'
        statistics:
          description: >
            Statistics definitions. It can be specified differently for each
            band in this output.
          type: object
          additionalProperties:
            x-additionalPropertiesName: band name
            allOf:
              - $ref: '#/components/schemas/StatisticsDefinition'
    HistogramDefinition:
      description: >
        The name of the band (as key) for which a histogram is defined below.
        Each key must match with one of the band names

        `output.bands` specified in a `setup()` function in an evalscript (for
        this output) or be "default". If it is "default", 

        the histogram specified below will be returned for all bands of this
        output, for which histogram is not explicitly defined.


        Single band histogram definition. Histogram may be defined by providing
        one of the following properties:
          * `binWidth`
          * `nBins`
          * exact bins provided by `bins` array

        [This
        example](https://docs.sentinel-hub.com/api/latest/api/statistical/examples/#multiple-outputs-with-different-datamasks-multi-band-output-with-custom-bands-names-different-histogram-types) 

        shows how to specify histograms using different parameters.


        `lowEdge` and `highEdge` are automatically calculated, if not explicitly
        provided (min and max values are used, respectively).

        Histograms can be calculated using float or integer math. Providing
        `lowEdge` and `highEdge` or `binWidth` or

        elements of the `bins` array as integer numbers will select integer
        math, otherwise float

        will be used. Output type of the band's output (specified in
        `output.sampleType` in a `setup()` function in an evalscript) must also
        match.
      type: object
      properties:
        nBins:
          description: |
            Number of bins in the histogram.
          type: number
        binWidth:
          description: |
            Bin width.
          type: number
        lowEdge:
          description: >
            Values lower to this will not be included in any of the histogram's
            bins.
          type: number
        highEdge:
          description: >
            Values higher to this will not be included in any of the histogram's
            bins.
          type: number
        bins:
          description: |
            Explicitly defined bins.
            Array [v1,v2,v3,v4] will define the following bins:
            [v1,v2), [v2,v3), [v3,v4]
          type: array
          items:
            type: number
            minItems: 2
    StatisticsDefinition:
      description: >-
        Single band statistics definition. The name of the band (as key) for
        which a calculation of statistic is defined below. Each key must match
        with one of the band names `output.bands` specified in a `setup()`
        function in an evalscript (for this output) or be "default". If it is
        "default", the statistics specified below will be calculated for all
        bands of this output, for which calculation of statistics is not
        explicitly defined.
      type: object
      properties:
        percentiles:
          description: Calculate percentiles.
          type: object
          properties:
            k:
              description: >
                Percentiles definition as array of values between [0,1], [see
                this
                example](https://docs.sentinel-hub.com/api/latest/api/statistical/examples/#statistics-histogram-and-percentiles-for-one-single-band-output).
              type: array
              items:
                type: number
                format: double
                minValue: 0
                maxValue: 1
    StatisticalRequestAggregation:
      required:
        - timeRange
        - aggregationInterval
      description: >
        Specifies how data is aggregated and processed before statistics is
        calculated.  `timeRange` and `aggregationInterval` combined define
        sampling intervals in time dimension.  Width/height or resx/resy
        combined with `input.bounds` define a sample matrix (i.e. "image") in
        spatial dimension.
      type: object
      properties:
        timeRange:
          $ref: '#/components/schemas/DateTimeInterval'
        aggregationInterval:
          $ref: '#/components/schemas/Aggregation'
        width:
          description: |
            Width of the sample matrix.
          type: integer
          format: int32
          minimum: 1
          maximum: 2500
          default: 256
          example: 512
        height:
          description: |
            Height of the sample matrix.
          type: integer
          format: int32
          minimum: 1
          maximum: 2500
          default: 256
          example: 512
        resx:
          description: >
            Spatial resolution used to calculate the width of the sample matrix
            from the `input.bounds`.

            Its units are defined by the CRS given in
            `input.bounds.properties.crs`

            parameter.
          type: number
          format: double
        resy:
          description: >
            Spatial resolution used to calculate the height of the sample matrix
            from the `input.bounds`.

            Its units are defined by the CRS given in
            `input.bounds.properties.crs`

            parameter.
          type: number
          format: double
        evalscript:
          description: >
            Your evalscript. For details, click

            <a href="https://docs.sentinel-hub.com/api/latest/evalscript/v3/"
            target="_blank">here</a>. 

            The evalscript will be executed once for each time interval defined
            by `timeRange` and `aggregationInterval`.
          type: string
    StatisticalResponse:
      description: |
        Statistics
      type: object
      properties:
        data:
          description: |
            Statistics for intervals, where data is available.
          type: array
          items:
            type: object
            properties:
              interval:
                description: |
                  Interval on which, there's actual data
                allOf:
                  - $ref: '#/components/schemas/DateTimeInterval'
              outputs:
                description: |
                  Per output statistics.
                  Output names are defined in evalscript.
                type: object
                additionalProperties:
                  x-additionalPropertiesName: output name
                  type: object
                  properties:
                    bands:
                      description: |
                        Per band statistics and histograms.
                      type: object
                      additionalProperties:
                        x-additionalPropertiesName: band name
                        allOf:
                          - $ref: '#/components/schemas/BandStatistics'
              error:
                description: >
                  If an error occurs when calculating statistics for a given
                  interval it is reported here.
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - BAD_REQUEST
                      - EXECUTION_ERROR
                      - TIMEOUT
    BandStatistics:
      type: object
      description: |
        Per band statistics and histograms
      properties:
        histogram:
          description: Histogram
          type: object
          properties:
            overflow:
              description: |
                Number of samples above `highEdge` value
              type: number
              format: integer
            underflow:
              description: |
                Number of samples below `lowEdge` value
              type: number
              format: integer
            bins:
              description: |
                Histogram bins
              type: array
              items:
                type: object
                properties:
                  lowEdge:
                    description: Bin's low edge (inclusive)
                    type: number
                  highEdge:
                    description: Bin's high edge (not inclusive unless last bin)
                    type: number
                  count:
                    description: number of samples that fall into the bin
                    type: number
                    format: integer
        stats:
          type: object
          description: Statistics
          properties:
            min:
              description: minimum value
              type: number
            max:
              description: maximum value
              type: number
            mean:
              description: mean value
              type: number
            stDev:
              description: standard deviation
              type: number
            sampleCount:
              description: total number of samples
              type: number
              format: integer
            noDataCount:
              description: total number of samples without value
              type: number
              format: integer
            percentiles:
              description: |
                Percentile to percentile value map.
              type: object
              additionalProperties:
                x-additionalPropertiesName: percentile [0,1]
                type: number
                format: double
    BatchProcessRequest:
      required:
        - processRequest
      type: object
      properties:
        id:
          description: Identifier
          type: string
          format: uuid
          readOnly: true
        userId:
          description: User that submitted the request
          type: string
          format: uuid
          readOnly: true
        created:
          description: Creation time of the request in ISO 8601
          type: string
          format: iso8601
          readOnly: true
        processRequest:
          $ref: '#/components/schemas/ProcessRequestForBatch'
        tilingGridId:
          description: This parameter was moved to tilingGrid
          type: integer
          format: int64
          deprecated: true
        tilingGrid:
          $ref: '#/components/schemas/TilingGridSettings'
        resolution:
          description: This parameter was moved to tilingGrid.
          type: number
          format: double
          deprecated: true
        output:
          $ref: '#/components/schemas/BatchProcessOutput'
        bucketName:
          description: >
            Simplified alternative for specifying where the results shall be
            written, where only the bucket name is specified. Required unless
            `output` is specified. <br/> Specifying `some.bucket` as
            `bucketName` is equivalent to specifying `s3://some.bucket` as the
            `defaultTilePath` in `output`.
          type: string
        description:
          description: Optional description that can be used to keep track of requests
          type: string
        valueEstimate:
          description: >
            Estimated processing value (cost) of the request in [processing
            units](https://docs.sentinel-hub.com/api/latest/api/overview/processing-unit/).
            The accuracy of the estimate depends on your request, as described
            in the
            [documentation](https://docs.sentinel-hub.com/api/latest/api/batch/#cost-estimate).
          type: number
          format: double
          readOnly: true
        tileCount:
          description: Number of output tiles
          type: integer
          format: int32
          readOnly: true
        tileWidthPx:
          description: Tile width in pixels
          type: integer
          format: int32
          readOnly: true
        tileHeightPx:
          description: Tile height in pixels
          type: integer
          format: int32
          readOnly: true
        userAction:
          description: Last user action on the request
          type: string
          enum:
            - NONE
            - ANALYSE
            - START
            - CANCEL
          readOnly: true
        userActionUpdated:
          description: Time of last user action update in ISO 8601
          type: string
          format: iso8601
          readOnly: true
        status:
          description: Current processing status of the request
          type: string
          enum:
            - CREATED
            - ANALYSING
            - ANALYSIS_DONE
            - PROCESSING
            - DONE
            - PARTIAL
            - FAILED
            - CANCELED
          readOnly: true
        error:
          description: >-
            Error description for requests that were submitted but failed during
            analysis or processing
          type: string
          readOnly: true
    MultiPartBatchRequest:
      type: object
      properties:
        request:
          $ref: '#/components/schemas/BatchProcessRequest'
        evalscript:
          description: Block of JavaScript code.
          type: string
    BatchProcessRequestUpdatePayload:
      type: object
      properties:
        output:
          description: >-
            Modified `output` object. If omitted, no values within `output` will
            be changed.
          type: object
          properties:
            collectionId:
              description: >
                The batch collection to link this batch process request to. The
                collection must exist and be either compatible with the batch
                process request (same band names and bit depths) or
                uninitialized, in which case it will get initialized with the
                batch process request's parameters. If omitted, the batch
                process request will be unlinked from its current collection.
              type: string
              default: null
        description:
          description: >
            Optional description that can be used to keep track of requests. If
            omitted, the description will not be changed.
          type: string
    BatchCollection:
      required:
        - name
      allOf:
        - $ref: '#/components/schemas/BYOCCollection'
        - type: object
          properties:
            batchData:
              type: object
              properties:
                tilingGridId:
                  description: ID of the tiling grid
                  type: long
                  readonly: true
    BatchCollectionUpdatePayload:
      type: object
      properties:
        name:
          description: Collection name
          type: string
    TilingGridSettings:
      required:
        - id
        - resolution
      description: |
        Tiling grid settings.
      type: object
      properties:
        id:
          description: Id of one of the supported tiling grids
          type: integer
          format: int64
        resolution:
          description: Output resolution in units of the tiling grid
          type: number
          format: double
        bufferX:
          description: >
            Will expand each output tile horizontally (on the left and the
            right) by number of pixels specified by this value. <br><br>
            <b>Example:</b> <br> If bufferX is 5, the output tile will be wider
            by 10 pixels. Coordinates of the tile are also moved accordingly by
            the number of pixels multiplied by resolution in each direction.
            However, the `tileWidthX` property returned by the API will **not**
            include the buffer.
          type: int16
        bufferY:
          description: >
            Will expand each output tile vertically (on the top and the bottom)
            by number of pixels specified by this value. See `bufferX` above for
            an example.
          type: int16
    BatchProcessOutput:
      description: >
        Specifies the tile output paths where the results shall be written.
        Required unless `bucketName` is specified.
      type: object
      properties:
        defaultTilePath:
          description: >
            Path or path template specifying where batch processing results
            shall be stored. Supported formats: <ul>
              <li>a valid Amazon S3 URL, e.g. `s3://some.bucket/some/folder`.<br/>
                A subdirectory will be created for this batch request, named after the request ID, and will contain further subdirectories with the output tiles.
                This is equivalent to the template `s3://some.bucket/some/folder/<requestId>/<tileName>/<outputId>.<format>`.
              </li>
              <li>a templated Amazon S3 URL, e.g. `s3://some.bucket/some/folder/<tileName>.tif`.
                Templating allows custom organization of the output files.
                Templates can contain the following placeholders, which are replaced by respective actual values when writing results:
                <ul>
                  <li> `<requestId>` - the ID of your batch request,</li>
                  <li> `<tileName>` - the name (string ID) of the tile within the used tiling grid,</li>
                  <li> `<tileId>` - the numerical ID of the tile within the used tiling grid,</li>
                  <li> `<outputId>` - the output (raster) identifier (e.g. `default`),</li>
                  <li> `<format>` - the filename extension of the output's format (e.g. `tiff`),</li>
                </ul>
                The template must contain `<tileName>` or `<tileId>` in order to ensure unique output files.
                In case of multiple outputs, the template must also contain `<outputId>`.
              </li>
            </ul> The request will fail if files already exist.
          type: string
        overwrite:
          description: >-
            If `true`, the request will NOT fail if files already exist.
            Instead, any existing files will be overwritten.
          default: false
          type: boolean
        cogOutput:
          description: >-
            If `true`, the results will be written as COG (cloud optimized
            GeoTIFFs). All outputs must use the TIFF format. We also suggest
            setting the evalscript output object `nodataValue` (<a
            href="https://docs.sentinel-hub.com/api/latest/evalscript/v3/#output-object-properties"
            target="_blank">more details</a>) for correct overview generation.
          default: false
          type: boolean
        cogParameters:
          $ref: '#/components/schemas/BatchCogParameters'
        createCollection:
          description: >
            If `true`, the results will be written as COG (cloud optimized
            GeoTIFFs) and a collection will be automatically created. All
            outputs must be single-band and use the TIFF format. Only one of
            *createCollection* and *collectinId* may be specified. Requires
            `"cogOutput"=true`.
          type: boolean
          default: false
        collectionId:
          description: >
            If provided, the results will be written as COG (cloud optimized
            GeoTIFFs) and added to the existing collection with the specified
            identifier. All outputs must be single-band and use the TIFF format.
            The collection must exist and be compatible -- that is, must contain
            bands equivalent to the batch request's outputs with the same bit
            depths. Only one of *createCollection* and *collectinId* may be
            specified. Requires `"cogOutput"=true`.
          type: string
          default: null
        responses:
          description: >
            Specification of path template for individual outputs/responses.
            Outputs/reponses not listed here will use `defaultTilePath`.
          type: array
          items:
            $ref: '#/components/schemas/BatchProcessOutputResponse'
    BatchProcessOutputResponse:
      type: object
      properties:
        identifier:
          type: string
          description: Raster identifier value.
          enum:
            - <identifier>
            - userdata
        tilePath:
          description: >-
            Path or path template where the response shall be written. Uses the
            same format as `defaultTilePath`.
          type: string
    BatchCogParameters:
      description: >
        Allows to specify COG creation parameters. Batch collections must use
        default values, therefore *cogParameters* must not be specified together
        with *createCollection* or *collectionId*.
      type: object
      properties:
        overviewLevels:
          description: >-
            Corresponds to the *levels* parameter of
            [gdaladdo](https://gdal.org/programs/gdaladdo.html).
          type: array
          items:
            type: integer
        overviewMinSize:
          description: >-
            Corresponds to the *minsize* parameter of
            [gdaladdo](https://gdal.org/programs/gdaladdo.html).
          type: integer
          default: min(blockxsize, blockysize)
        resamplingAlgorithm:
          type: string
          enum:
            - nearest
            - average
            - gauss
            - cubic
            - cubicspline
            - lanczos
            - average_magphase
            - mode
          description: >-
            Corresponds to the value of the *-r* parameter of
            [gdaladdo](https://gdal.org/programs/gdaladdo.html).
          default: average
        blockxsize:
          description: >-
            Corresponds to the *BLOCKXSIZE* parameter of [GDAL GTiff raster
            driver](https://gdal.org/drivers/raster/gtiff.html).
          type: integer
          default: 1024
        blockysize:
          description: >-
            Corresponds to the *BLOCKYSIZE* parameter of [GDAL GTiff raster
            driver](https://gdal.org/drivers/raster/gtiff.html).
          type: integer
          default: 1024
        usePredictor:
          description: >
            Whether predictor should be used for TIFF compression. If true, the
            predictor "2" will be passed to [GDAL GTiff raster
            driver](https://gdal.org/drivers/raster/gtiff.html) in case of
            integer output and "3" for FLOAT32 output. If false, the value "1"
            (no predictor) will be used.
          type: boolean
          default: true
    BatchTile:
      type: object
      properties:
        id:
          description: Identifier
          type: integer
          format: int64
        requestId:
          description: ID of the request the tile belongs to
          type: string
          format: uuid
        geometry:
          $ref: '#/components/schemas/Polygon'
        origin:
          $ref: '#/components/schemas/BatchTileOrigin'
        status:
          description: Current processing status of the tile
          type: string
          enum:
            - PENDING
            - SCHEDULED
            - QUEUED
            - PROCESSING
            - PROCESSED
            - FAILED
        error:
          description: Error description for tiles that failed during processing.
          type: string
        cost:
          description: Tile processing cost (PU)
          type: number
          format: double
    BatchTileOrigin:
      description: Coordinates of the tile origin (lower left corner) in the tile's CRS.
      type: object
      properties:
        type:
          type: string
          enum:
            - Point
        coordinates:
          type: array
          minItems: 2
          maxItems: 2
          items:
            type: number
            format: double
        crs:
          type: object
          properties:
            type:
              type: string
              enum:
                - name
            properties:
              type: object
              properties:
                name:
                  type: string
                  description: CRS used by the tile, e.g. `urn:ogc:def:crs:EPSG::4326`
                  example: urn:ogc:def:crs:EPSG::4326
    TilingGridDescriptor:
      type: object
      properties:
        id:
          description: Identifier
          type: integer
          format: int64
        name:
          type: string
        properties:
          $ref: '#/components/schemas/TilingGridDescriptorProperties'
    TilingGridDescriptorProperties:
      type: object
      properties:
        tileWidth:
          description: Width of each output tile, in units used by the grid
          type: number
          format: double
        tileHeight:
          description: Height of each output tile, in units used by the grid
          type: number
          format: double
        resolutions:
          description: List of supported resolutions, in units used by the grid
          type: array
          uniqueItems: true
          items:
            type: number
            description: List of supported resolutions, in units used by the grid
            format: double
        unit:
          description: Units used by the grid
          type: string
          enum:
            - METRE
            - DEGREE
    ProcessRequestForBatch:
      type: object
      description: >-
        Batch processing equivalent of the <a href="#operation/process">Process
        request</a>.
      required:
        - evalscript
        - input
      properties:
        input:
          $ref: '#/components/schemas/ProcessRequestInput'
        output:
          $ref: '#/components/schemas/ProcessRequestOutputForBatch'
        evalscript:
          description: >
            Your evalscript. For details, click

            <a href="https://docs.sentinel-hub.com/api/latest/evalscript/v3/"
            target="_blank">here</a>.
          type: string
    ProcessRequestOutputForBatch:
      type: object
      properties:
        responses:
          type: array
          description: Response object.
          items:
            $ref: '#/components/schemas/ProcessRequestOutputResponse'
    NativeSearchQuery:
      oneOf:
        - $ref: '#/components/schemas/AirbusNativeSearchQuery'
        - $ref: '#/components/schemas/PlanetNativeSearchQuery'
        - $ref: '#/components/schemas/MaxarNativeSearchQuery'
    SearchQuery:
      oneOf:
        - $ref: '#/components/schemas/AirbusSearchQuery'
        - $ref: '#/components/schemas/PlanetSearchQuery'
        - $ref: '#/components/schemas/MaxarSearchQuery'
    SearchResults:
      oneOf:
        - $ref: '#/components/schemas/AirbusSearchResults'
        - $ref: '#/components/schemas/PlanetSearchResults'
        - $ref: '#/components/schemas/MaxarSearchResults'
    OrderRequest:
      oneOf:
        - $ref: '#/components/schemas/AirbusOrderRequest'
        - $ref: '#/components/schemas/PlanetOrderRequest'
        - $ref: '#/components/schemas/MaxarOrderRequest'
    Order:
      allOf:
        - $ref: '#/components/schemas/OrderBase'
        - type: object
          properties:
            input:
              type: object
              description: Specification of the ordered data
    SearchQueryBase:
      required:
        - provider
        - bounds
        - data
      properties:
        provider:
          type: string
        bounds:
          allOf:
            - type: object
              description: >
                Defines the request bounds by specifying the bounding box and/or
                geometry for the request.

                If both are given, a request is made for a geometry and bbox is
                ignored.
            - $ref: '#/components/schemas/ProcessRequestInputBounds'
        data:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              dataFilter:
                type: object
                properties:
                  timeRange:
                    $ref: '#/components/schemas/TimeRange'
                  maxCloudCoverage:
                    $ref: '#/components/schemas/MaxCloudCoverage'
    SearchResultBase:
      properties:
        links:
          $ref: '#/components/schemas/View'
    OrderBase:
      type: object
      required:
        - geometry
      properties:
        id:
          description: Order ID
          type: string
          format: uuid
          readOnly: true
        name:
          description: >-
            Order name. It's also used as a name for new BYOC collection, if no
            collection is given in collectionId field.
          type: string
        userId:
          description: User ID
          type: string
          format: uuid
          readOnly: true
        collectionId:
          description: >
            BYOC collection ID. If given at order creation, requested data is
            imported into referenced collection, which must be compatible with
            the data being ordered - that is, must either be empty or contain
            the same bands as the data being ordered.


            If not given at order creation, a new BYOC collection is created and
            its ID is returned in the response.
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/OrderStatus'
        sqkm:
          description: Total size of the order in km<sup>2</sup>
          type: number
          readOnly: true
    OrderStatus:
      description: Order status
      type: string
      readOnly: true
      enum:
        - CREATED
        - CANCELLED
        - RUNNING
        - DONE
        - PARTIAL
        - FAILED
    DeliveryBase:
      type: object
      properties:
        id:
          description: Delivery ID
          type: string
          format: uuid
        sqkm:
          description: Size of the delivery in km<sup>2</sup>.
          type: number
        status:
          $ref: '#/components/schemas/DeliveryStatus'
        errorMessage:
          description: Error message if status = "DELIVERY_FAILED" or "IMPORT_FAILED".
          type: string
    Delivery:
      oneOf:
        - $ref: '#/components/schemas/AirbusDelivery'
        - $ref: '#/components/schemas/PlanetDelivery'
        - $ref: '#/components/schemas/MaxarDelivery'
    DeliveryStatus:
      description: Delivery status
      type: string
      readOnly: true
      enum:
        - WAITING
        - DELIVERED
        - DELIVERY_FAILED
        - PREPARING
        - INGESTING
        - DONE
        - IMPORT_FAILED
    Quota:
      type: object
      properties:
        collectionId:
          $ref: '#/components/schemas/TpdiCollectionId'
        quotaSqkm:
          type: number
          description: >-
            This is total purchased quota. Available quota is quotaSqkm -
            quotaUsed.
          readOnly: true
        quotaUsed:
          type: number
          description: Quota used in square kilometers.
          readOnly: true
    TpdiCollectionId:
      description: Collection ID
      type: string
      readOnly: true
      enum:
        - AIRBUS_PLEIADES
        - AIRBUS_SPOT
        - PLANET_SCOPE
        - MAXAR_WORLDVIEW
    QuotaExceededError:
      allOf:
        - $ref: '#/components/schemas/Boom'
        - type: object
          properties:
            errors:
              type: object
              properties:
                availableQuota:
                  type: number
                  description: Currently available quota for the provider of the order
                requiredQuota:
                  type: number
                  description: >-
                    Quota that would be required for successful confirmation of
                    the order
    PlanetRequestBase:
      type: object
      required:
        - provider
        - planetApiKey
      properties:
        provider:
          description: Specify this value to use data provider Planet.
          type: string
          enum:
            - PLANET
        planetApiKey:
          description: Your Planet API key. Get one from Planet https://www.planet.com.
          type: string
    PlanetNativeSearchQuery:
      allOf:
        - $ref: '#/components/schemas/PlanetRequestBase'
        - type: object
          example:
            provider: PLANET
            item_types:
              - PSScene4Band
            filter:
              type: AndFilter
              config:
                - type: GeometryFilter
                  field_name: geometry
                  config:
                    type: Polygon
                    coordinates:
                      - - - 15.786
                          - 46.7008
                        - - 15.786
                          - 46.7234
                        - - 15.8473
                          - 46.7234
                        - - 15.8473
                          - 46.7008
                        - - 15.786
                          - 46.7008
                - type: DateRangeFilter
                  field_name: acquired
                  config:
                    gte: '2019-04-27T00:00:00.000Z'
                    lte: '2019-04-30T00:00:00.000Z'
                - type: RangeFilter
                  field_name: cloud_cover
                  config:
                    lte: 0.3
          additionalProperties:
            externalDocs:
              description: Fields from Request body of Planet Quick search.
              url: >-
                https://developers.planet.com/docs/data/reference/#operation/QuickSearch
    PlanetSearchQuery:
      allOf:
        - $ref: '#/components/schemas/PlanetRequestBase'
        - $ref: '#/components/schemas/SearchQueryBase'
        - type: object
          properties:
            data:
              type: array
              minItems: 1
              maxItems: 1
              items:
                type: object
                required:
                  - itemType
                properties:
                  itemType:
                    type: string
                    description: |
                      Set to PSScene4Band to get PlanetScope data.
                    enum:
                      - PSScene4Band
                  dataFilter:
                    type: object
                    properties:
                      nativeFilter:
                        type: object
                        description: Planet Data API search filters
                        externalDocs:
                          description: >-
                            Link to the Planet documentation page about search
                            filters.
                          url: >-
                            https://developers.planet.com/docs/data/searches-filtering/#search-filters
                        example:
                          type: RangeFilter
                          field_name: snow_ice_percent
                          config:
                            gte: 10
    PlanetSearchResults:
      allOf:
        - $ref: '#/components/schemas/SearchResultBase'
      properties:
        features:
          type: array
          externalDocs:
            description: Search results as returned by Planet Quick search
            url: >-
              https://developers.planet.com/docs/data/reference/#operation/QuickSearch
        <other fields>:
          type: any
          description: >-
            Other fields returned by Planet Quick search may be included in the
            response.
    PlanetOrderRequest:
      allOf:
        - $ref: '#/components/schemas/Order'
        - required:
            - input
        - type: object
          properties:
            input:
              allOf:
                - $ref: '#/components/schemas/PlanetSearchQuery'
                - type: object
                  properties:
                    data:
                      type: array
                      description: >
                        To order specific Planet items, list their IDs in
                        itemIds field. Otherwise, provide search criteria in the
                        dataFilter field to order all items matching the
                        criteria. Omitting both will order all items within the
                        specified bounds.


                        In both cases, at most 250 items can be ordered at once,
                        i.e. orders listing too many item IDs will fail, as will
                        search-based orders that match too many items.
                      items:
                        type: object
                        required:
                          - productBundle
                        properties:
                          productBundle:
                            type: string
                            enum:
                              - analytic
                          harmonizeTo:
                            type: string
                            default: PS2
                            enum:
                              - PS2
                              - NONE
                            description: >
                              Sensing instrument whose values the data should be
                              harmonized to. Currently only harmonization to the
                              instrument `PS2` is supported and is also the
                              default. To disable harmonization and instead
                              import the data as-is, this field must be
                              explicitly set to `NONE`.
                            externalDocs:
                              description: Details on PlanetScope instruments
                              url: https://developers.planet.com/docs/data/sensors/
                          itemIds:
                            type: array
                            minItems: 1
                            maxItems: 250
                            description: >
                              List of itemIds to order, if dataFilter is not
                              provided. The itemId list is typically obtained
                              from a previous search request.
                            items:
                              type: string
    PlanetDelivery:
      allOf:
        - $ref: '#/components/schemas/DeliveryBase'
        - type: object
          properties:
            itemId:
              description: Planet Item ID.
              type: string
            sensingInstrument:
              type: string
              enum:
                - PS2
                - PS2.SD
                - PSB.SD
              description: >
                PlanetScope instrument used to capture the data in this
                delivery. Only present if harmonization was requested when
                ordering.
            harmonizedToInstrument:
              type: string
              enum:
                - PS2
              description: >
                Instrument whose coefficients were used to harmonize the data in
                this delivery. Only present if harmonization was requested when
                ordering.
    AirbusRequestBase:
      type: object
      required:
        - provider
      properties:
        provider:
          description: Specify this value to use data provider Airbus OneAtlas.
          type: string
          enum:
            - AIRBUS
    AirbusNativeSearchQuery:
      allOf:
        - $ref: '#/components/schemas/AirbusRequestBase'
        - type: object
          example:
            provider: AIRBUS
            geometry:
              type: Polygon
              coordinates:
                - - - 14.458696
                    - 45.996878
                  - - 14.458696
                    - 46.002617
                  - - 14.463096
                    - 46.002617
                  - - 14.463096
                    - 45.996878
                  - - 14.458696
                    - 45.996878
            constellation: PHR
            processingLevel: SENSOR
            acquisitionDate: '[2018-06-01T00:00:00.000Z,2018-09-01T00:00:00.000Z]'
            cloudCover: '[0,30]'
            snowCover: '[0,10]'
            incidenceAngle: '[0,10]'
          additionalProperties:
            externalDocs:
              description: Fields from Request body of Airbus OneAtlas search.
              url: http://www.geoapi-airbusds.com/guides/oneatlas-data/g-search/
    AirbusSearchQuery:
      allOf:
        - $ref: '#/components/schemas/AirbusRequestBase'
        - $ref: '#/components/schemas/SearchQueryBase'
        - type: object
          properties:
            data:
              type: array
              minItems: 1
              maxItems: 1
              items:
                type: object
                required:
                  - constellation
                properties:
                  constellation:
                    type: string
                    description: |
                      Set to PHR to get Pleiades data or to SPOT for SPOT data.
                    enum:
                      - PHR
                      - SPOT
                  dataFilter:
                    type: object
                    properties:
                      processingLevel:
                        $ref: '#/components/schemas/AirbusProcessingLevel'
                      maxSnowCoverage:
                        $ref: '#/components/schemas/MaxSnowCoverage'
                      maxIncidenceAngle:
                        $ref: '#/components/schemas/MaxIncidenceAngle'
                      expirationDate:
                        $ref: '#/components/schemas/TimeRange'
    AirbusProcessingLevel:
      type: string
      description: >
        When searching, you will receive results from the full catalog as well
        as the Living Library, which holds images that have cloud cover under
        30% and Incidence angle under 40째. If you want to search only Living
        Library results, you will need to filter using processingLevel. This
        value could be equal to SENSOR (images which meet Living Library
        criteria) and ALBUM (images that do not meeting Living Library criteria
        in terms of incidence angle and cloud cover).
      enum:
        - SENSOR
        - ALBUM
    MaxSnowCoverage:
      description: The maximum allowable snow coverage in percent.
      type: number
      format: double
      minimum: 0
      maximum: 100
      default: 100
    MaxIncidenceAngle:
      description: The maximum allowable incidence angle in degrees.
      type: number
      format: double
      minimum: 0
      maximum: 90
      default: 90
    AirbusSearchResults:
      allOf:
        - $ref: '#/components/schemas/SearchResultBase'
      properties:
        features:
          type: array
          externalDocs:
            description: Search results as returned by Airbus OneAtlas search
            url: http://www.geoapi-airbusds.com/guides/oneatlas-data/g-search/
        <other fields>:
          type: any
          description: >-
            Other fields returned by Airbus OneAtlas search may be included in
            the response.
    AirbusOrderRequest:
      allOf:
        - $ref: '#/components/schemas/Order'
        - required:
            - input
        - type: object
          properties:
            input:
              allOf:
                - $ref: '#/components/schemas/AirbusSearchQuery'
                - type: object
                  properties:
                    data:
                      type: array
                      description: >
                        To order specific Airbus OneAtlas products, list them in
                        products field. Otherwise, provide search criteria in
                        the dataFilter field to order all items matching the
                        criteria. Omitting both will order all products within
                        the specified bounds.


                        In both cases, at most 10 products can be ordered at
                        once, i.e. orders listing too many product IDs will
                        fail, as will search-based orders that match too many
                        products.
                      items:
                        type: object
                        properties:
                          products:
                            type: array
                            minItems: 1
                            maxItems: 10
                            description: >
                              Only provide this field when ordering specific
                              Airbus OneAtlas products -- leave out when
                              ordering via search criteria.
                            items:
                              type: object
                              description: TODO2
                              required:
                                - id
                              properties:
                                id:
                                  type: string
                                  format: uuid
                                  description: The ID of product to order
    AirbusDelivery:
      allOf:
        - $ref: '#/components/schemas/DeliveryBase'
        - type: object
          properties:
            productId:
              description: Airbus Product ID.
              type: string
              format: uuid
    MaxarRequestBase:
      type: object
      required:
        - provider
      properties:
        provider:
          description: Specify this value to use data provider Maxar.
          type: string
          enum:
            - MAXAR
    MaxarNativeSearchQuery:
      allOf:
        - $ref: '#/components/schemas/MaxarRequestBase'
        - type: object
          example:
            provider: MAXAR
            startDate: '2020-11-06T00:00:00.0Z'
            endDate: '2020-11-06T23:59:59.0Z'
            sensor: WV03
            aoiInGeoJson:
              type: Polygon
              coordinates:
                - - - 15.81
                    - 46.7
                  - - 15.84
                    - 46.7
                  - - 15.84
                    - 46.72
                  - - 15.81
                    - 46.72
                  - - 15.81
                    - 46.7
              crs:
                type: name
                properties:
                  name: EPSG:4326
          additionalProperties:
            description: Fields from request body of MAXAR search.
    MaxarSearchQuery:
      allOf:
        - $ref: '#/components/schemas/MaxarRequestBase'
        - $ref: '#/components/schemas/SearchQueryBase'
        - type: object
          properties:
            data:
              type: array
              minItems: 1
              maxItems: 1
              items:
                type: object
                required:
                  - productBands
                properties:
                  productBands:
                    type: string
                    description: |
                      Band Bundle
                    enum:
                      - 4BB
                  dataFilter:
                    type: object
                    properties:
                      minOffNadir:
                        $ref: '#/components/schemas/MaxarMinOffNadir'
                      maxOffNadir:
                        $ref: '#/components/schemas/MaxarMaxOffNadir'
                      minSunElevation:
                        $ref: '#/components/schemas/MaxarMinSunElevation'
                      maxSunElevation:
                        $ref: '#/components/schemas/MaxarMaxSunElevation'
                      sensor:
                        $ref: '#/components/schemas/MaxarSensor'
    MaxarMinOffNadir:
      type: number
      format: int
      minimum: 0
      maximum: 45
      default: 0
    MaxarMaxOffNadir:
      type: number
      format: int
      minimum: 0
      maximum: 45
      default: 45
    MaxarMinSunElevation:
      description: The minimum allowable sun elevation in degrees
      type: number
      format: int
      minimum: 0
      maximum: 90
      default: 0
    MaxarMaxSunElevation:
      description: The maximum allowable sun elevation in degrees
      type: number
      format: int
      minimum: 0
      maximum: 90
      default: 90
    MaxarSensor:
      description: >
        If specified, limits search results to a single sensor (satellite).

        Results are also filtered to include only sensors that support the
        requested `productBands`. Thus, if a sensor that does not support all
        bands is specified, no results will be returned.
      type: string
      enum:
        - WV01
        - WV02
        - WV03
        - WV04
        - GE01
    MaxarSearchResults:
      properties:
        features:
          type: array
          description: >
            Search results as returned by MAXAR search.

            Note thate MAXAR search does not support paging. Thus, the `count`
            and `viewtoken` query parameters are ignored and a plain list of
            results is returned.
    MaxarOrderRequest:
      allOf:
        - $ref: '#/components/schemas/Order'
        - required:
            - input
        - type: object
          properties:
            input:
              allOf:
                - $ref: '#/components/schemas/MaxarSearchQuery'
                - type: object
                  properties:
                    data:
                      type: array
                      description: >
                        To order specific MAXAR products, list them in the
                        `selectedImages` field. Otherwise, provide search
                        criteria in the dataFilter field to order all items
                        matching the criteria.

                        In both cases, at most 10 products can be ordered at
                        once, i.e. orders listing too many product IDs will
                        fail, as will search-based orders that match too many
                        products.

                        Minimum order of 5 km^2 applies to each product, i.e. if
                        the intersection of order's bounds and products's bounds
                        is smaller, the order will fail.
                      items:
                        type: object
                        properties:
                          selectedImages:
                            type: array
                            minItems: 1
                            maxItems: 10
                            description: >
                              Only provide this field when ordering specific
                              MAXAR products -- leave out when ordering via
                              search criteria.
                            items:
                              type: string
                              description: The ID of product (strip) to order
    MaxarDelivery:
      allOf:
        - $ref: '#/components/schemas/DeliveryBase'
        - type: object
          properties:
            selectedImages:
              description: MAXAR product IDs.
              type: array
              minItems: 1
              items:
                type: string
    BYOCCollectionResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/BYOCCollection'
    BYOCCollectionsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/BYOCCollection'
        links:
          $ref: '#/components/schemas/View'
    BYOCCollection:
      required:
        - name
        - s3Bucket
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        userId:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        s3Bucket:
          type: string
        noData:
          type: number
        additionalData:
          $ref: '#/components/schemas/BYOCCollectionAdditionalData'
        created:
          description: >-
            The date when the collection was created. Older collections don't
            have it.
          type: string
          readOnly: true
          nullable: true
    BYOCCollectionAdditionalData:
      type: object
      properties:
        bands:
          type: object
          additionalProperties:
            x-additionalPropertiesName: band
            allOf:
              - $ref: '#/components/schemas/BYOCFormat'
        maxMetersPerPixel:
          type: number
          readOnly: true
          description: >
            How much meters per pixel can you request with Process/OGC/Batch
            requests for this collection. The limit is internally increased to
            500, if it's less than that.
    BYOCFormat:
      type: object
      properties:
        bitDepth:
          type: integer
          format: int32
    BYOCTilesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/BYOCTile'
        links:
          $ref: '#/components/schemas/View'
    BYOCTileResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/BYOCTile'
    BYOCTile:
      type: object
      required:
        - path
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        path:
          description: |
            The path within the bucket where the files are. Can also use
            the '(BAND)' placeholder when the file names contain more than just
            the band name.
          type: string
          pattern: ^([^/](/?[^/])*)?$
          example: folder/prefix_(BAND)
        tileGeometry:
          allOf:
            - type: object
              description: The tile bounding box.
              readOnly: true
            - $ref: '#/components/schemas/Polygon'
        coverGeometry:
          allOf:
            - type: object
              description: >
                The geometry as GeoJSON, which outlines the area that has data.
                If it isn't specified, it is automatically set to the tile
                bounding box.
            - $ref: '#/components/schemas/Geometry'
        sensingTime:
          type: string
          description: The sensing time of the tile in ISO 8601.
          nullable: true
          examples:
            - 2020 (equals to 2020-01-01T00:00:00Z)
            - 2020-05 (equals to 2020-05-01T00:00:00Z)
            - 2020-05-29 (equals to 2020-05-29T00:00:00Z)
            - 2020-05-29T16 (equals to 2020-05-29T16:00:00Z)
            - 2020-05-29T16:09 (equals to 2020-05-29T16:00:00Z)
            - 2020-05-29T16:09:51 (equals to 2020-05-29T16:09:51Z)
            - 2020-05-29T16:09:51Z (equals to 2020-05-29T16:09:51Z)
        status:
          description: The status of the tile.
          type: string
          enum:
            - WAITING
            - QUEUED
            - INGESTING
            - INGESTED
            - FAILED
          example: INGESTED
          readOnly: true
        additionalData:
          allOf:
            - $ref: '#/components/schemas/BYOCTileAdditionalData'
            - type: object
              readOnly: true
        created:
          type: string
          description: The time when the tile was created in ISO 8601.
          readOnly: true
    BYOCTileAdditionalData:
      type: object
      properties:
        failedIngestionCause:
          description: >-
            Contains additional information about why ingestion failed (if
            applicable).
          type: string
          nullable: true
    BYOCTileUpdatePayload:
      type: object
      properties:
        coverGeometry:
          allOf:
            - type: object
              description: >
                The geometry as GeoJSON, which outlines the area that has data.
                If it isn't specified, it is automatically set to the tile
                bounding box.
            - $ref: '#/components/schemas/Geometry'
        sensingTime:
          type: string
          description: The sensing time of the tile in ISO 8601.
          nullable: true
          examples:
            - 2020 (equals to 2020-01-01T00:00:00Z)
            - 2020-05 (equals to 2020-05-01T00:00:00Z)
            - 2020-05-29 (equals to 2020-05-29T00:00:00Z)
            - 2020-05-29T16 (equals to 2020-05-29T16:00:00Z)
            - 2020-05-29T16:09 (equals to 2020-05-29T16:00:00Z)
            - 2020-05-29T16:09:51 (equals to 2020-05-29T16:09:51Z)
            - 2020-05-29T16:09:51Z (equals to 2020-05-29T16:09:51Z)
    BYOCCollectionUpdatePayload:
      type: object
      properties:
        name:
          type: string
        noData:
          type: number
    ResolvableDataProduct:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/DataProduct'
    DataProduct:
      type: object
      properties:
        id:
          type: integer
          description: Identifier
          format: int64
        name:
          type: string
        description:
          type: string
        evalScript:
          type: string
        legend:
          type: object
        dataset:
          $ref: '#/components/schemas/ResourceReference'
        baseProduct:
          type: string
        visualization:
          type: string
    DatasetDescriptor:
      type: object
      allOf:
        - $ref: '#/components/schemas/ResourceReference'
        - type: object
          properties:
            id:
              description: Identifier
              type: string
            name:
              type: string
    ResolvableDatasetSourceDescriptor:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/DatasetSourceDescriptor'
    DatasetSourceDescriptor:
      type: object
      properties:
        id:
          description: Identifier
          type: integer
          format: int64
        description:
          type: string
        settings:
          $ref: '#/components/schemas/Settings'
        dataset:
          $ref: '#/components/schemas/ResourceReference'
    Settings:
      type: object
      properties:
        indexServiceUrl:
          type: string
    WmsInstanceUserData:
      type: object
      properties:
        id:
          description: Identifier
          type: string
          format: uuid
        user_data:
          type: object
        instance:
          $ref: '#/components/schemas/ResolvableWmsInstance'
    WmsUserDataPayload:
      type: object
      properties:
        user_data:
          type: object
    ResolvableWmsInstance:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/WmsInstance'
    WmsInstance:
      type: object
      properties:
        id:
          description: Identifier
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        areaOfInterest:
          $ref: '#/components/schemas/Geometry'
        userId:
          type: string
          format: uuid
        created:
          description: The date when the instance was created.
          type: string
          readOnly: true
          nullable: true
        additionalData:
          $ref: '#/components/schemas/WmsInstanceAdditionalData'
        layers:
          $ref: '#/components/schemas/ResolvableCollectionWmsLayer'
    WmsInstanceAdditionalData:
      type: object
      properties:
        showWarnings:
          type: boolean
        showLogo:
          type: boolean
        forceFormat:
          type: string
        imageQuality:
          type: integer
          format: int32
        disabled:
          type: boolean
    ResolvableCollectionWmsLayer:
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/WmsLayer'
    ResolvableWmsLayer:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/WmsLayer'
    WmsLayer:
      type: object
      properties:
        id:
          description: Identifier
          type: string
        title:
          type: string
        description:
          type: string
        styles:
          type: array
          items:
            $ref: '#/components/schemas/WmsLayerStyle'
        orderHint:
          type: integer
          format: int32
        instance:
          $ref: '#/components/schemas/ResolvableWmsInstance'
        dataset:
          $ref: '#/components/schemas/ResourceReference'
        datasetSource:
          $ref: '#/components/schemas/ResolvableDatasetSourceDescriptor'
        defaultStyleName:
          type: string
        datasourceDefaults:
          $ref: '#/components/schemas/WmsLayerDatasourceAttributes'
        additionalData:
          $ref: '#/components/schemas/WmsLayerAdditionalData'
    WmsLayerStyle:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        evalScript:
          type: string
        legend:
          type: object
        dataProduct:
          $ref: '#/components/schemas/ResolvableDataProduct'
    WmsLayerAdditionalData:
      type: object
      properties:
        overlays:
          type: array
          items:
            $ref: '#/components/schemas/WmsLayerOverlay'
    WmsLayerOverlay:
      type: object
      properties:
        type:
          type: string
    WmsLayerDatasourceAttributes:
      type: object
      properties:
        upsampling:
          $ref: '#/components/schemas/Interpolator'
        downsampling:
          $ref: '#/components/schemas/Interpolator'
        type:
          $ref: '#/components/schemas/DatasetType'
    WmsLayerUserData:
      type: object
      properties:
        id:
          description: Identifier
          type: string
        user_data:
          type: object
        layer:
          $ref: '#/components/schemas/ResolvableWmsLayer'
        instance:
          $ref: '#/components/schemas/ResolvableWmsInstance'
    Location:
      type: object
      properties:
        '@id':
          type: string
          format: uri
        id:
          description: Sentinel Hub deployment location identifier
          type: string
        url:
          description: null
          type: string
        wmsUrl:
          description: WMS Service url
          type: string
        processUrl:
          description: Process API url
          type: string
        catalogUrl:
          description: Catalog API url
          type: string
    BYOCCollectionMetadata:
      type: object
      properties:
        '@id':
          type: string
          format: uri
        id:
          description: BYOC Collection identifier
          type: uuid
        location:
          description: BYOC Collection location
          allOf:
            - $ref: '#/components/schemas/Location'
        datasetType:
          description: Dataset type
          type: string
          default: CUSTOM
        bands:
          type: array
          items:
            $ref: '#/components/schemas/BandMetadata'
    BandMetadata:
      type: object
      description: Band information
      properties:
        name:
          type: string
          description: Band identifier
        sampleType:
          type: string
          enum:
            - UINT8
            - UINT16
            - FLOAT32
          description: Band sample type
    collection:
      type: object
      required:
        - id
        - links
        - stac_version
        - description
        - license
        - extent
      properties:
        id:
          description: identifier of the collection used, for example, in URIs
          type: string
          example: address
        title:
          description: human readable title of the collection
          type: string
          example: address
        description:
          description: a description of the features in the collection
          type: string
          example: An address.
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
          example:
            - href: http://data.example.com/buildings
              rel: item
            - href: http://example.com/concepts/buildings.html
              rel: describedBy
              type: text/html
        extent:
          $ref: '#/components/schemas/extent'
        itemType:
          description: >-
            indicator about the type of the items in the collection (the default
            value is 'feature').
          type: string
          default: feature
        crs:
          description: the list of coordinate reference systems supported by the service
          type: array
          items:
            type: string
          default:
            - http://www.opengis.net/def/crs/OGC/1.3/CRS84
          example:
            - http://www.opengis.net/def/crs/OGC/1.3/CRS84
            - http://www.opengis.net/def/crs/EPSG/0/4326
        stac_version:
          $ref: '#/components/schemas/stac_version'
        stac_extensions:
          $ref: '#/components/schemas/stac_extensions'
        keywords:
          type: array
          description: List of keywords describing the collection.
          items:
            type: string
        license:
          $ref: '#/components/schemas/license'
        providers:
          $ref: '#/components/schemas/providers'
        summaries:
          description: |-
            Summaries are either a unique set of all available values *or*
            statistics. Statistics by default only specify the range (minimum
            and maximum values), but can optionally be accompanied by additional
            statistical values. The range can specify the potential range of
            values, but it is recommended to be as precise as possible. The set
            of values must contain at least one element and it is strongly
            recommended to list all values. It is recommended to list as many
            properties as reasonable so that consumers get a full overview of
            the Collection. Properties that are covered by the Collection
            specification (e.g. `providers` and `license`) may not be repeated
            in the summaries.
          type: object
          additionalProperties:
            oneOf:
              - type: array
                title: Set of values
                items:
                  description: A value of any type.
              - type: object
                title: Statistics
                description: |-
                  By default, only ranges with a minimum and a maximum value can
                  be specified. Ranges can be specified for ordinal values only,
                  which means they need to have a rank order. Therefore, ranges
                  can only be specified for numbers and some special types of
                  strings. Examples: grades (A to F), dates or times.
                  Implementors are free to add other derived statistical values
                  to the object, for example `mean` or `stddev`.
                required:
                  - min
                  - max
                properties:
                  min:
                    anyOf:
                      - type: string
                      - type: number
                  max:
                    anyOf:
                      - type: string
                      - type: number
      example:
        stac_version: 0.9.0
        stac_extensions: []
        id: Sentinel-2
        title: 'Sentinel-2 MSI: MultiSpectral Instrument, Level-1C'
        description: |
          Sentinel-2 is a wide-swath, high-resolution, multi-spectral
          imaging mission...
        license: proprietary
        keywords:
          - copernicus
          - esa
          - eu
          - msi
          - radiance
          - sentinel
        providers:
          - name: ESA
            roles:
              - producer
              - licensor
            url: https://sentinel.esa.int/web/sentinel/user-guides/sentinel-2-msi
        extent:
          spatial:
            bbox:
              - - -180
                - -56
                - 180
                - 83
          temporal:
            interval:
              - - '2015-06-23T00:00:00Z'
                - '2019-07-10T13:44:56Z'
        summaries:
          datetime:
            min: '2015-06-23T00:00:00Z'
            max: '2019-07-10T13:44:56Z'
          sci:citation:
            - Copernicus Sentinel data [Year]
          eo:gsd:
            - 10
            - 30
            - 60
          platform:
            - sentinel-2a
            - sentinel-2b
          constellation:
            - sentinel-2
          instruments:
            - msi
          view:off_nadir:
            min: 0
            max: 100
          view:sun_elevation:
            min: 6.78
            max: 89.9
          eo:bands:
            - - name: B1
                common_name: coastal
                center_wavelength: 4.439
              - name: B2
                common_name: blue
                center_wavelength: 4.966
              - name: B3
                common_name: green
                center_wavelength: 5.6
              - name: B4
                common_name: red
                center_wavelength: 6.645
              - name: B5
                center_wavelength: 7.039
              - name: B6
                center_wavelength: 7.402
              - name: B7
                center_wavelength: 7.825
              - name: B8
                common_name: nir
                center_wavelength: 8.351
              - name: B8A
                center_wavelength: 8.648
              - name: B9
                center_wavelength: 9.45
              - name: B10
                center_wavelength: 1.3735
              - name: B11
                common_name: swir16
                center_wavelength: 1.6137
              - name: B12
                common_name: swir22
                center_wavelength: 2.2024
        links:
          - rel: self
            href: http://cool-sat.com/collections/Sentinel-2
          - rel: root
            href: http://cool-sat.com/collections
          - rel: license
            href: >-
              https://scihub.copernicus.eu/twiki/pub/SciHubWebPortal/TermsConditions/Sentinel_Data_Terms_and_Conditions.pdf
            title: >-
              Legal notice on the use of Copernicus Sentinel Data and Service
              Information
    collections:
      type: object
      required:
        - links
        - collections
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
        collections:
          type: array
          items:
            $ref: '#/components/schemas/collection'
    confClasses:
      type: object
      required:
        - conformsTo
      properties:
        conformsTo:
          type: array
          items:
            type: string
    exception:
      type: object
      description: >-
        Information about the exception: an error code plus an optional
        description.
      required:
        - code
      properties:
        code:
          type: string
        description:
          type: string
    extent:
      type: object
      description: >-
        The extent of the features in the collection. In the Core only spatial
        and temporal

        extents are specified. Extensions may add additional members to
        represent other

        extents, for example, thermal or pressure ranges.
      properties:
        spatial:
          description: The spatial extent of the features in the collection.
          type: object
          properties:
            bbox:
              description: >-
                One or more bounding boxes that describe the spatial extent of
                the dataset.

                In the Core only a single bounding box is supported. Extensions
                may support

                additional areas. If multiple areas are provided, the union of
                the bounding

                boxes describes the spatial extent.
              type: array
              minItems: 1
              items:
                description: >-
                  Each bounding box is provided as four or six numbers,
                  depending on

                  whether the coordinate reference system includes a vertical
                  axis

                  (height or depth):


                  * Lower left corner, coordinate axis 1

                  * Lower left corner, coordinate axis 2

                  * Minimum value, coordinate axis 3 (optional)

                  * Upper right corner, coordinate axis 1

                  * Upper right corner, coordinate axis 2

                  * Maximum value, coordinate axis 3 (optional)


                  The coordinate reference system of the values is WGS 84
                  longitude/latitude

                  (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a
                  different coordinate

                  reference system is specified in `crs`.


                  For WGS 84 longitude/latitude the values are in most cases the
                  sequence of

                  minimum longitude, minimum latitude, maximum longitude and
                  maximum latitude.

                  However, in cases where the box spans the antimeridian the
                  first value

                  (west-most box edge) is larger than the third value (east-most
                  box edge).


                  If the vertical axis is included, the third and the sixth
                  number are

                  the bottom and the top of the 3-dimensional bounding box.


                  If a feature has multiple spatial geometry properties, it is
                  the decision of the

                  server whether only a single spatial geometry property is used
                  to determine

                  the extent or all relevant geometries.
                type: array
                minItems: 4
                maxItems: 6
                items:
                  type: number
                example:
                  - -180
                  - -90
                  - 180
                  - 90
            crs:
              description: >-
                Coordinate reference system of the coordinates in the spatial
                extent

                (property `bbox`). The default reference system is WGS 84
                longitude/latitude.

                In the Core this is the only supported coordinate reference
                system.

                Extensions may support additional coordinate reference systems
                and add

                additional enum values.
              type: string
              enum:
                - http://www.opengis.net/def/crs/OGC/1.3/CRS84
              default: http://www.opengis.net/def/crs/OGC/1.3/CRS84
          required:
            - bbox
        temporal:
          description: The temporal extent of the features in the collection.
          type: object
          properties:
            interval:
              description: >-
                One or more time intervals that describe the temporal extent of
                the dataset.

                The value `null` is supported and indicates an open time
                intervall.

                In the Core only a single time interval is supported. Extensions
                may support

                multiple intervals. If multiple intervals are provided, the
                union of the

                intervals describes the temporal extent.
              type: array
              minItems: 1
              items:
                description: >-
                  Begin and end times of the time interval. The timestamps

                  are in the coordinate reference system specified in `trs`. By
                  default

                  this is the Gregorian calendar.
                type: array
                minItems: 2
                maxItems: 2
                items:
                  type: string
                  format: date-time
                  nullable: true
                example:
                  - '2011-11-11T12:22:11Z'
                  - null
            trs:
              description: >-
                Coordinate reference system of the coordinates in the temporal
                extent

                (property `interval`). The default reference system is the
                Gregorian calendar.

                In the Core this is the only supported temporal reference
                system.

                Extensions may support additional temporal reference systems and
                add

                additional enum values.
              type: string
              enum:
                - http://www.opengis.net/def/uom/ISO-8601/0/Gregorian
              default: http://www.opengis.net/def/uom/ISO-8601/0/Gregorian
          required:
            - interval
      required:
        - spatial
        - temporal
    featureCollectionGeoJSON:
      type: object
      required:
        - type
        - features
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/item'
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
        timeStamp:
          $ref: '#/components/schemas/timeStamp'
        numberMatched:
          $ref: '#/components/schemas/numberMatched'
        numberReturned:
          $ref: '#/components/schemas/numberReturned'
    geometryGeoJSON:
      oneOf:
        - $ref: '#/components/schemas/pointGeoJSON'
        - $ref: '#/components/schemas/multipointGeoJSON'
        - $ref: '#/components/schemas/linestringGeoJSON'
        - $ref: '#/components/schemas/multilinestringGeoJSON'
        - $ref: '#/components/schemas/polygonGeoJSON'
        - $ref: '#/components/schemas/multipolygonGeoJSON'
        - $ref: '#/components/schemas/geometrycollectionGeoJSON'
    geometrycollectionGeoJSON:
      type: object
      required:
        - type
        - geometries
      properties:
        type:
          type: string
          enum:
            - GeometryCollection
        geometries:
          type: array
          items:
            $ref: '#/components/schemas/geometryGeoJSON'
    landingPage:
      type: object
      required:
        - links
        - stac_version
        - id
        - description
      properties:
        title:
          type: string
          example: Buildings in Bonn
        description:
          type: string
          example: >-
            Access to data about buildings in the city of Bonn via a Web API
            that conforms to the OGC API Features specification.
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
        stac_version:
          $ref: '#/components/schemas/stac_version'
        stac_extensions:
          $ref: '#/components/schemas/stac_extensions'
        id:
          type: string
    linestringGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - LineString
        coordinates:
          type: array
          minItems: 2
          items:
            type: array
            minItems: 2
            items:
              type: number
    link:
      type: object
      required:
        - href
        - rel
      properties:
        href:
          type: string
          example: http://www.geoserver.example/stac/naip/child/catalog.json
          format: url
        rel:
          type: string
          example: child
        type:
          type: string
          example: application/geo+json
        hreflang:
          type: string
          example: en
        title:
          type: string
          example: NAIP Child Catalog
        length:
          type: integer
        method:
          type: string
          enum:
            - GET
            - POST
          default: GET
          description: Specifies the HTTP method that the link expects
        headers:
          type: object
          description: Object key values pairs they map to headers
          example:
            Accept: application/json
        body:
          type: object
          description: >-
            For POST requests, the link can specify the HTTP body as a JSON
            object.
        merge:
          type: boolean
          default: false
          description: |-
            This is only valid when the server is responding to POST request.

            If merge is true, the client is expected to merge the body value
            into the current request body before following the link.
            This avoids passing large post bodies back and forth when following
            links, particularly for navigating pages through the `POST /search`
            endpoint.

            NOTE: To support form encoding it is expected that a client be able
            to merge in the key value pairs specified as JSON
            `{"next": "token"}` will become `&next=token`.
      title: Link
    multilinestringGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiLineString
        coordinates:
          type: array
          items:
            type: array
            minItems: 2
            items:
              type: array
              minItems: 2
              items:
                type: number
    multipointGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiPoint
        coordinates:
          type: array
          items:
            type: array
            minItems: 2
            items:
              type: number
    multipolygonGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiPolygon
        coordinates:
          type: array
          items:
            type: array
            items:
              type: array
              minItems: 4
              items:
                type: array
                minItems: 2
                items:
                  type: number
    numberMatched:
      description: |-
        The number of features of the feature type that match the selection
        parameters like `bbox`.
      type: integer
      minimum: 0
      example: 127
    numberReturned:
      description: |-
        The number of features in the feature collection.

        A server may omit this information in a response, if the information
        about the number of features is not known or difficult to compute.

        If the value is provided, the value shall be identical to the number
        of items in the "features" array.
      type: integer
      minimum: 0
      example: 10
    pointGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - Point
        coordinates:
          type: array
          minItems: 2
          items:
            type: number
    polygonGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - Polygon
        coordinates:
          type: array
          items:
            type: array
            minItems: 4
            items:
              type: array
              minItems: 2
              items:
                type: number
    timeStamp:
      description: >-
        This property indicates the time and date when the response was
        generated.
      type: string
      format: date-time
      example: '2017-08-17T08:05:32Z'
    license:
      type: string
      description: |-
        License(s) of the data as a SPDX
        [License identifier](https://spdx.org/licenses/). Alternatively, use
        `proprietary` if the license is not on the SPDX license list or
        `various` if multiple licenses apply. In these two cases links to the
        license texts SHOULD be added, see the `license` link relation type.

        Non-SPDX licenses SHOULD add a link to the license text with the
        `license` relation in the links section. The license text MUST NOT be
        provided as a value of this field. If there is no public license URL
        available, it is RECOMMENDED to host the license text and
        link to it.
      example: Apache-2.0
    providers:
      type: array
      description: >-
        A list of providers, which may include all organizations capturing or
        processing the data or the hosting provider. Providers should be listed
        in chronological order with the most recent provider being the last
        element of the list.
      items:
        type: object
        title: Provider
        required:
          - name
        properties:
          name:
            description: The name of the organization or the individual.
            type: string
          description:
            description: >-
              Multi-line description to add further provider information such as
              processing details for processors and producers, hosting details
              for hosts or basic contact information.


              CommonMark 0.29 syntax MAY be used for rich text representation.
            type: string
          roles:
            description: |-
              Roles of the provider.

              The provider's role(s) can be one or more of the following
              elements:

              * licensor: The organization that is licensing the dataset under
                the license specified in the collection's license field.
              * producer: The producer of the data is the provider that
                initially captured and processed the source data, e.g. ESA for
                Sentinel-2 data.
              * processor: A processor is any provider who processed data to a
                derived product.
              * host: The host is the actual provider offering the data on their
                storage. There should be no more than one host, specified as last
                element of the list.
            type: array
            items:
              type: string
              enum:
                - producer
                - licensor
                - processor
                - host
          url:
            description: >-
              Homepage on which the provider describes the dataset and publishes
              contact information.
            type: string
            format: url
    searchBody:
      description: The search criteria
      type: object
      allOf:
        - $ref: '#/components/schemas/bboxFilter'
        - $ref: '#/components/schemas/datetimeFilter'
        - $ref: '#/components/schemas/intersectsFilter'
        - $ref: '#/components/schemas/collectionsFilter'
        - $ref: '#/components/schemas/idsFilter'
        - $ref: '#/components/schemas/limitFilter'
        - $ref: '#/components/schemas/nextFilter'
        - $ref: '#/components/schemas/queryFilter'
        - $ref: '#/components/schemas/fieldsFilter'
        - $ref: '#/components/schemas/distinctFilter'
    limit:
      type: integer
      minimum: 1
      example: 10
      default: 10
      maximum: 100
      description: The maximum number of results to return (page size). Defaults to 10
    bbox:
      description: |-
        Only features that have a geometry that intersects the bounding box are
        selected. The bounding box is provided as four or six numbers,
        depending on whether the coordinate reference system includes a
        vertical axis (elevation or depth):

        * Lower left corner, coordinate axis 1
        * Lower left corner, coordinate axis 2  
        * Lower left corner, coordinate axis 3 (optional) 
        * Upper right corner, coordinate axis 1 
        * Upper right corner, coordinate axis 2 
        * Upper right corner, coordinate axis 3 (optional)

        The coordinate reference system of the values is WGS84
        longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84).

        For WGS84 longitude/latitude the values are in most cases the sequence
        of minimum longitude, minimum latitude, maximum longitude and maximum
        latitude. However, in cases where the box spans the antimeridian the
        first value (west-most box edge) is larger than the third value
        (east-most box edge).

        If a feature has multiple spatial geometry properties, it is the
        decision of the server whether only a single spatial geometry property
        is used to determine the extent or all relevant geometries.

        Example: The bounding box of the New Zealand Exclusive Economic Zone in
        WGS 84 (from 160.6째E to 170째W and from 55.95째S to 25.89째S) would be
        represented in JSON as `[160.6, -55.95, -170, -25.89]` and in a query as
        `bbox=160.6,-55.95,-170,-25.89`.
      type: array
      minItems: 4
      maxItems: 6
      items:
        type: number
      example:
        - -110
        - 39.5
        - -105
        - 40.5
    bboxFilter:
      type: object
      description: Only return items that intersect the provided bounding box.
      properties:
        bbox:
          $ref: '#/components/schemas/bbox'
    collectionsArray:
      type: array
      description: |-
        Array of Collection IDs to include in the search for items.
        Only Items in one of the provided Collections will be searched.
      items:
        type: string
    ids:
      type: array
      description: |-
        Array of Item ids to return. All other filter parameters that further
        restrict the number of search results are ignored
      items:
        type: string
    datetimeFilter:
      description: An object representing a date+time based filter.
      type: object
      properties:
        datetime:
          $ref: '#/components/schemas/datetime'
    intersectsFilter:
      type: object
      description: Only returns items that intersect with the provided polygon.
      properties:
        intersects:
          $ref: https://geojson.org/schema/Geometry.json
    limitFilter:
      type: object
      description: Only returns maximum number of results (page size)
      properties:
        limit:
          $ref: '#/components/schemas/limit'
    idsFilter:
      type: object
      description: Only returns items that match the array of given ids
      properties:
        ids:
          $ref: '#/components/schemas/ids'
    collectionsFilter:
      type: object
      description: Only returns the collections specified
      properties:
        collections:
          $ref: '#/components/schemas/collectionsArray'
    datetime:
      type: string
      description: |-
        Either a date-time or an interval, open or closed. Date and time
        expressions adhere to RFC 3339. Open intervals are expressed using
        double-dots.

        Examples:

        * A date-time: "2018-02-12T23:20:50Z"
        * A closed interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"
        * Open intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"

        Only features that have a temporal property that intersects the value of
        `datetime` are selected.

        If a feature has multiple temporal properties, it is the decision of the
        server whether only a single temporal property is used to determine
        the extent or all relevant temporal properties.
      example: 2018-02-12T00:00:00Z/2018-03-18T12:31:12Z
    stac_version:
      title: STAC version
      type: string
      example: 0.9.0
    stac_extensions:
      title: STAC extensions
      type: array
      uniqueItems: true
      items:
        anyOf:
          - title: Reference to a JSON Schema
            type: string
            format: uri
          - title: Reference to a core extension
            type: string
    itemCollection:
      description: >-
        A GeoJSON FeatureCollection augmented with foreign members that contain
        values relevant to a STAC entity
      type: object
      required:
        - features
        - type
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/item'
        links:
          $ref: '#/components/schemas/itemCollectionLinks'
        context:
          type: object
          required:
            - next
            - returned
          properties:
            limit:
              type: integer
              nullable: true
              minimum: 0
              example: 5
            matched:
              type: integer
              minimum: 0
              example: 1
            returned:
              type: integer
              minimum: 0
              example: 1
    item:
      description: >-
        A GeoJSON Feature augmented with foreign members that contain values
        relevant to a STAC entity
      type: object
      required:
        - stac_version
        - id
        - type
        - geometry
        - bbox
        - links
        - properties
        - assets
      properties:
        stac_version:
          $ref: '#/components/schemas/stac_version'
        stac_extensions:
          $ref: '#/components/schemas/stac_extensions'
        id:
          $ref: '#/components/schemas/itemId'
        bbox:
          $ref: '#/components/schemas/bbox'
        geometry:
          $ref: https://geojson.org/schema/Geometry.json
        type:
          $ref: '#/components/schemas/itemType'
        properties:
          $ref: '#/components/schemas/itemProperties'
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
        assets:
          $ref: '#/components/schemas/itemAssets'
      example:
        stac_version: 0.9.0
        stac_extensions:
          - eo
          - view
          - https://example.com/cs-extension/1.0/schema.json
        type: Feature
        id: CS3-20160503_132131_05
        bbox:
          - -122.59750209
          - 37.48803556
          - -122.2880486
          - 37.613537207
        geometry:
          type: Polygon
          coordinates:
            - - - -122.308150179
                - 37.488035566
              - - -122.597502109
                - 37.538869539
              - - -122.576687533
                - 37.613537207
              - - -122.2880486
                - 37.562818007
              - - -122.308150179
                - 37.488035566
        properties:
          datetime: '2016-05-03T13:22:30.040Z'
          title: A CS3 item
          license: PDDL-1.0
          providers:
            - name: CoolSat
              roles:
                - producer
                - licensor
              url: https://cool-sat.com/
          view:sun_azimuth: 168.7
          eo:cloud_cover: 0.12
          view:off_nadir: 1.4
          platform: coolsat2
          instruments:
            - cool_sensor_v1
          eo:bands: []
          view:sun_elevation: 33.4
          eo:gsd: 0.512
        collection: CS3
        links:
          - rel: self
            href: http://cool-sat.com/collections/CS3/items/20160503_132130_04
          - rel: root
            href: http://cool-sat.com/collections
          - rel: parent
            href: http://cool-sat.com/collections/CS3
          - rel: collection
            href: http://cool-sat.com/collections/CS3
        assets:
          analytic:
            href: >-
              http://cool-sat.com/static-catalog/CS3/20160503_132130_04/analytic.tif
            title: 4-Band Analytic
          thumbnail:
            href: >-
              http://cool-sat.com/static-catalog/CS3/20160503_132130_04/thumbnail.png
            title: Thumbnail
    itemId:
      type: string
      example: path/to/example.tif
      description: Provider identifier, a unique ID, potentially a link to a file.
    itemType:
      type: string
      description: The GeoJSON type
      enum:
        - Feature
    itemAssets:
      type: object
      additionalProperties:
        type: object
        required:
          - href
        properties:
          href:
            type: string
            format: url
            description: Link to the asset object
            example: >-
              http://cool-sat.com/catalog/collections/cs/items/CS3-20160503_132130_04/thumb.png
          title:
            type: string
            description: Displayed title
            example: Thumbnail
          description:
            type: string
            description: |-
              Multi-line description to explain the asset.

              [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for
              rich text representation.
            example: Small 256x256px PNG thumbnail for a preview.
          type:
            type: string
            description: Media type of the asset
            example: image/png
          roles:
            type: array
            items:
              type: string
            description: Purposes of the asset
            example:
              - thumbnail
    itemProperties:
      type: object
      required:
        - datetime
      description: provides the core metatdata fields plus extensions
      properties:
        datetime:
          $ref: '#/components/schemas/datetime'
      additionalProperties:
        description: >-
          Any additional properties added in via Item specification or
          extensions.
    itemCollectionLinks:
      type: array
      description: >-
        An array of links. Can be used for pagination, e.g. by providing a link
        with the `next` relation type.
      items:
        $ref: '#/components/schemas/link'
      example:
        - rel: next
          href: >-
            http://api.cool-sat.com/search?next=ANsXtp9mrqN0yrKWhf-y2PUpHRLQb1GT-mtxNcXou8TwkXhi1Jbk
    nextFilter:
      type: object
      description: Only returns the next set of results
      properties:
        next:
          $ref: '#/components/schemas/next'
    next:
      type: integer
      description: The token to retrieve the next set of results
      default: null
    queryFilter:
      type: object
      description: Allows users to query properties for specific values
      properties:
        query:
          $ref: '#/components/schemas/query'
    query:
      type: object
      description: Define which properties to query and the operatations to apply
      additionalProperties:
        $ref: '#/components/schemas/queryProp'
      example:
        eo:cloud_cover:
          gt: 8
          lt: 50
        platform:
          eq: landsat-8
        datetime:
          gte: '2018-02-12T00:00:00Z'
          lte: '2018-03-18T12:31:12Z'
        pl:item_type:
          startsWith: PSScene
        product:
          in:
            - foo
            - bar
            - baz
        eo:gsd:
          in:
            - 10
            - 20
    queryProp:
      description: Apply query operations to a specific property
      anyOf:
        - description: >-
            if the object doesn't contain any of the operators, it is equivalent
            to using the equals operator
        - type: object
          description: Match using an operator
          properties:
            eq:
              description: >-
                Find items with a property that is equal to the specified value.
                For strings, a case-insensitive comparison must be performed.
              nullable: true
              oneOf:
                - type: string
                - type: number
                - type: boolean
            neq:
              description: >-
                Find items that *don't* contain the specified value. For
                strings, a case-insensitive comparison must be performed.
              nullable: true
              oneOf:
                - type: string
                - type: number
                - type: boolean
            gt:
              description: >-
                Find items with a property value greater than the specified
                value.
              oneOf:
                - type: string
                  format: date-time
                - type: number
            lt:
              description: Find items with a property value less than the specified value.
              oneOf:
                - type: string
                  format: date-time
                - type: number
            gte:
              description: >-
                Find items with a property value greater than or equal the
                specified value.
              oneOf:
                - type: string
                  format: date-time
                - type: number
            lte:
              description: >-
                Find items with a property value less than or equal the
                specified value.
              oneOf:
                - type: string
                  format: date-time
                - type: number
            startsWith:
              description: >-
                Find items with a property that begins with the specified
                string. A case-insensitive comparison must be performed.
              type: string
            endsWith:
              description: >-
                Find items with a property that ends with the specified string.
                A case-insensitive comparison must be performed.
              type: string
            contains:
              description: >-
                Find items with a property that contains the specified literal
                string, e.g., matches ".*<STRING>.*". A case-insensitive
                comparison must be performed.
              type: string
            in:
              description: >-
                Find items with a property that equals at least one entry in the
                specified array. A case-insensitive comparison must be
                performed.
              type: array
              items:
                oneOf:
                  - type: string
                  - type: number
    fieldsFilter:
      type: object
      description: Determines the shape of the features in the response
      properties:
        fields:
          $ref: '#/components/schemas/fields'
    fields:
      description: |
        The include and exclude members specify an array of
        property names that are either included or excluded
        from the result, respectively. If both include and
        exclude are specified, include takes precedence.
        Values should include the full JSON path of the property.
      type: object
      properties:
        include:
          type: array
          items:
            type: string
        exclude:
          type: array
          items:
            type: string
      example:
        include:
          - id
          - properties.eo:cloud_cover
        exclude:
          - geometry
          - properties.datetime
    distinctFilter:
      type: object
      description: Return distinct values of specified property
      properties:
        distinct:
          $ref: '#/components/schemas/distinct'
    distinct:
      description: |
        Return distinct values of specified property
      type: string
      default: null
      required: false
tags:
  - name: process
    x-displayName: Process
    description: >-
      Make sure to use the appropriate <a
      href="https://docs.sentinel-hub.com/api/latest/data/"
      target="_blank">end-point for each of the datasets</a>, e.g. for Landsat,
      Sentinel-3, etc.
  - name: statistical
    x-displayName: Statistical
  - name: batch_process
    x-displayName: Process
  - name: batch_collection
    x-displayName: Collection
  - name: batch_tile
    x-displayName: Tile
  - name: batch_tiling_grid
    x-displayName: Tiling grid
  - name: dataimport_search
    x-displayName: Search
  - name: dataimport_product
    x-displayName: Product
  - name: dataimport_order
    x-displayName: Order
  - name: dataimport_delivery
    x-displayName: Delivery
  - name: dataimport_quota
    x-displayName: Quota
  - name: byoc_collection
    x-displayName: Collection
  - name: byoc_tile
    x-displayName: Tile
  - name: configuration_data_product
    x-displayName: Data product
  - name: configuration_dataset
    x-displayName: Dataset
  - name: configuration_dataset_source
    x-displayName: Dataset source
  - name: configuration_instance_user_data
    x-displayName: Instance user data
  - name: configuration_layer_user_data
    x-displayName: Layer user data
  - name: configuration_layer
    x-displayName: Layer
  - name: configuration_instance
    x-displayName: Instance
  - name: metadata_location
    x-displayName: Location
  - name: metadata_collection
    x-displayName: Collection
  - name: Capabilities
    description: >-
      Essential characteristics of this API. <br/><br/>

      Make sure to use the appropriate <a
      href="https://docs.sentinel-hub.com/api/latest/#/data/"
      target="_blank">end-point for each of the datasets</a>, e.g. for Landsat,
      Sentinel-3, etc.
  - name: Data
    description: access to data (features)
  - name: STAC
    description: >-
      Extension to OGC API - Features to support STAC metadata model and search
      API
x-tagGroups:
  - name: Sentinel Hub API
    tags:
      - process
  - name: Statistical
    tags:
      - statistical
  - name: Batch
    tags:
      - batch_process
      - batch_collection
      - batch_tile
      - batch_tiling_grid
  - name: Data Import
    tags:
      - dataimport_search
      - dataimport_product
      - dataimport_order
      - dataimport_delivery
      - dataimport_quota
  - name: Bring Your Own COG
    tags:
      - byoc_collection
      - byoc_tile
  - name: Configuration
    tags:
      - configuration_data_product
      - configuration_dataset
      - configuration_dataset_source
      - configuration_instance_user_data
      - configuration_layer_user_data
      - configuration_layer
      - configuration_instance
  - name: Metadata
    tags:
      - metadata_location
      - metadata_collection
  - name: Catalog
    tags:
      - Capabilities
      - Data
      - STAC
paths:
  /api/v1/process:
    post:
      summary: Process
      operationId: process
      tags:
        - process
      parameters:
        - in: header
          name: Accept
          schema:
            type: string
          description: >
            Sets response type and has priority over the type defined in the
            output object of the request.

            Possible values are `image/jpeg`, `image/png`, `image/tiff`,
            `application/json`, `application/tar`, `application/x-tar`,
            `multipart/mixed`, and `application/octet-stream`.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MultiPartProcessRequest'
      responses:
        '200':
          description: Successful response
          content:
            image/jpeg:
              schema:
                title: Jpeg image
                type: string
                format: image/jpeg
            image/png:
              schema:
                title: Png image
                type: string
                format: image/png
            image/tiff:
              schema:
                title: TIFF image
                type: string
                format: image/tiff
            application/json:
              schema:
                title: JSON data
                type: string
                format: application/json
            multipart/mixed:
              schema:
                title: Mixed data
                type: string
                format: multipart/mixed
            application/x-tar:
              schema:
                title: Tar
                type: string
                format: application/x-tar
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
      security:
        - OAuth2: []
      x-codeSamples:
        - lang: Javascript
          source: >
            const response =
            fetch("https://services.sentinel-hub.com/api/v1/process", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                "Authorization": "Bearer <your_access_token>"
              },
              body: JSON.stringify({
              "input": {
                "bounds": {
                  "bbox": [
                    13.822174072265625,
                    45.85080395917834,
                    14.55963134765625,
                    46.29191774991382
                  ]
                },
                "data": [{
                  "type": "S2L2A"
                }]
              },
              "evalscript": `
                //VERSION=3

                function setup() {
                  return {
                    input: ["B02", "B03", "B04"],
                    output: {
                      bands: 3
                    }
                  };
                }

                function evaluatePixel(
                  sample,
                  scenes,
                  inputMetadata,
                  customData,
                  outputMetadata
                ) {
                  return [2.5 * sample.B04, 2.5 * sample.B03, 2.5 * sample.B02];
                }
                `
              })
            })
        - lang: Python
          source: >
            import requests


            response =
            requests.post('https://services.sentinel-hub.com/api/v1/process',
              headers={"Authorization" : "Bearer <your_access_token>"},
              json={
                "input": {
                    "bounds": {
                        "bbox": [
                            13.822174072265625,
                            45.85080395917834,
                            14.55963134765625,
                            46.29191774991382
                        ]
                    },
                    "data": [{
                        "type": "S2L2A"
                    }]
                },
                "evalscript": """
                //VERSION=3

                function setup() {
                  return {
                    input: ["B02", "B03", "B04"],
                    output: {
                      bands: 3
                    }
                  };
                }

                function evaluatePixel(
                  sample,
                  scenes,
                  inputMetadata,
                  customData,
                  outputMetadata
                ) {
                  return [2.5 * sample.B04, 2.5 * sample.B03, 2.5 * sample.B02];
                }
                """
            })
        - lang: Curl
          source: |
            curl -X POST \
              https://services.sentinel-hub.com/api/v1/process \
              -H 'Content-Type: application/json' \
              -H 'Authorization: Bearer <your_access_token>' \
              -d '{
              "input": {
                "bounds": {
                  "bbox": [
                    13.822174072265625,
                    45.85080395917834,
                    14.55963134765625,
                    46.29191774991382
                  ]
                },
                "data": [
                  {
                    "type": "S2L2A"
                  }
                ]
              },
              "evalscript": "//VERSION=3\nfunction setup() {\n  return {\n    input: [\"B02\", \"B03\", \"B04\"],\n    output: {\n      bands: 3\n    }\n  };\n}\nfunction evaluatePixel(\n  sample,\n  scenes,\n  inputMetadata,\n  customData,\n  outputMetadata\n) {\n  return [2.5 * sample.B04, 2.5 * sample.B03, 2.5 * sample.B02];\n}\n"
            }
            ' -o image.png
        - lang: Curl (multipart)
          source: |
            curl -X POST \
              https://services.sentinel-hub.com/api/v1/process \
              -H 'Content-Type: multipart/form-data' \
              -H 'Authorization: Bearer <your_access_token>' \
              -F 'request={
              "input": {
                "bounds": {
                  "bbox": [
                    13.822174072265625,
                    45.85080395917834,
                    14.55963134765625,
                    46.29191774991382
                  ]
                },
                "data": [
                  {
                    "type": "S2L2A"
                  }
                ]
              }
            }' \
              -F 'evalscript=//VERSION=3

            function setup() {
              return {
                input: ["B02", "B03", "B04"],
                output: {
                  bands: 3
                }
              }
            }

            function evaluatePixel(
              sample,
              scenes,
              inputMetadata,
              customData,
              outputMetadata
            ) {
              return [2.5 * sample.B04, 2.5 * sample.B03, 2.5 * sample.B02]
            }
            ' -o image.png
  /api/v1/statistical:
    post:
      summary: Submit statistical request
      tags:
        - statistical
      operationId: submitStatisticalRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatisticalRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MultiPartStatisticalRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticalResponse'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
      security:
        - OAuth2: []
  /api/v1/batch/process:
    post:
      operationId: createNewBatchProcessingRequest
      summary: Submit new batch processing request
      tags:
        - batch_process
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchProcessRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MultiPartBatchRequest'
      responses:
        '201':
          description: Request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchProcessRequest'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      security:
        - OAuth2: []
    get:
      summary: Query batch process requests
      operationId: getAllBatchProcessRequests
      tags:
        - batch_process
      parameters:
        - name: userid
          description: User ID
          in: query
          schema:
            type: string
            format: uuid
        - name: collectionId
          description: >
            Filter batch process requests by the collectionId of batch
            collection.

            Omit to get all batch process requests, including those not linked
            to any collection.
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/SearchBeanCount'
        - $ref: '#/components/parameters/SearchBeanViewtoken'
        - $ref: '#/components/parameters/SearchBeanSearch'
        - name: sort
          description: |
            Sort the batch process requests by given field.
            Omit for default ordering.
          in: query
          schema:
            type: string
            enum:
              - created
              - created:desc
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BatchProcessRequest'
                  links:
                    $ref: '#/components/schemas/View'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      security:
        - OAuth2: []
  /api/v1/batch/process/{requestId}:
    get:
      summary: Retrieve a single batch process request
      operationId: getSingleBatchProcessRequestById
      tags:
        - batch_process
      parameters:
        - $ref: '#/components/parameters/BatchRequestId'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchProcessRequest'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
    put:
      summary: Update a batch process request
      description: >
        Only the requests that are not currently being processed nor waiting to
        be processed can be updated.
      operationId: updateBatchProcessRequest
      tags:
        - batch_process
      parameters:
        - $ref: '#/components/parameters/BatchRequestId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchProcessRequestUpdatePayload'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchProcessRequest'
        '400':
          $ref: '#/components/responses/401'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
      security:
        - OAuth2: []
    delete:
      summary: Delete a batch process request
      operationId: deleteBatchProcessRequest
      description: >
        Deletes a batch process request if it:

        * is not currently being processed or analysed,

        * has not been confirmed for processing or analysis,

        * has no successfully processed tiles.


        Requests that have been confirmed or are currently being processed or
        analysed must be canceled before deletion.

        Requests with processed tiles cannot be deleted.
      tags:
        - batch_process
      parameters:
        - $ref: '#/components/parameters/BatchRequestId'
      responses:
        '204':
          description: Successful response
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          description: Conflict - batch request state does not allow its deletion
  /api/v1/batch/process/{requestId}/analyse:
    post:
      summary: Request analysis of a batch process request
      operationId: batchAnalyse
      tags:
        - batch_process
      parameters:
        - $ref: '#/components/parameters/BatchRequestId'
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
  /api/v1/batch/process/{requestId}/start:
    post:
      summary: Start (confirm) processing of a batch process request
      operationId: batchStartProcessRequest
      tags:
        - batch_process
      parameters:
        - $ref: '#/components/parameters/BatchRequestId'
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
  /api/v1/batch/process/{requestId}/cancel:
    post:
      summary: Cancel a batch process request
      operationId: batchCancelProcessRequest
      tags:
        - batch_process
      parameters:
        - $ref: '#/components/parameters/BatchRequestId'
      responses:
        '204':
          description: Success
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
  /api/v1/batch/process/{requestId}/restartpartial:
    post:
      summary: Restart a partially processed request
      description: Restart processing of failed tiles in a partially processed request
      operationId: batchRestartPartialProcessRequest
      tags:
        - batch_process
      parameters:
        - $ref: '#/components/parameters/BatchRequestId'
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
  /api/v1/batch/collections:
    post:
      operationId: createNewBatchCollection
      summary: Create a new batch collection
      tags:
        - batch_collection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCollection'
      responses:
        '201':
          description: Collection created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCollection'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      security:
        - OAuth2: []
    get:
      summary: Query batch collections
      operationId: getAllBatchCollections
      tags:
        - batch_collection
      parameters:
        - $ref: '#/components/parameters/SearchBeanCount'
        - $ref: '#/components/parameters/SearchBeanViewtoken'
        - $ref: '#/components/parameters/SearchBeanSearch'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BatchCollection'
                  links:
                    $ref: '#/components/schemas/View'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      security:
        - OAuth2: []
  /api/v1/batch/collections/{collectionId}:
    get:
      summary: Retrieve a single batch collection
      operationId: getSingleBatchCollectionById
      tags:
        - batch_collection
      parameters:
        - $ref: '#/components/parameters/BatchCollectionId'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCollection'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
    put:
      summary: Update a batch collection
      operationId: updateBatchCollection
      tags:
        - batch_collection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCollectionUpdatePayload'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchProcessRequest'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
    delete:
      summary: Delete a batch collection
      operationId: deleteBatchCollection
      description: >
        Deletes a batch collection if it is not being used by any batch process
        request,

        except for possible `FAILED` and `CANCELED` requests.
      tags:
        - batch_collection
      parameters:
        - $ref: '#/components/parameters/BatchCollectionId'
      responses:
        '204':
          description: Successful response
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          description: Conflict - batch collection in use
  /api/v1/batch/process/{requestId}/tiles:
    get:
      summary: Get all tiles of a batch process
      operationId: getAllBatchProcessTiles
      tags:
        - batch_tile
      parameters:
        - $ref: '#/components/parameters/BatchRequestId'
        - name: status
          description: Only tiles with this status will be returned. Omit to get all tiles.
          in: query
          schema:
            type: string
            enum:
              - PENDING
              - SCHEDULED
              - QUEUED
              - PROCESSING
              - PROCESSED
              - FAILED
        - $ref: '#/components/parameters/SearchBeanCount'
        - $ref: '#/components/parameters/SearchBeanViewtoken'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BatchTile'
                  links:
                    $ref: '#/components/schemas/View'
      security:
        - OAuth2: []
  /api/v1/batch/process/{requestId}/tiles/{tileId}:
    get:
      summary: Retrieve a single tile for the specific batch process
      operationId: getBatchTileById
      tags:
        - batch_tile
      parameters:
        - $ref: '#/components/parameters/BatchRequestId'
        - $ref: '#/components/parameters/BatchTileId'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchTile'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
  /api/v1/batch/process/{requestId}/tiles/{tileId}/restart:
    post:
      summary: Request re-processing of the tile.
      description: >-
        Only tiles with status FAILED can be restarted. If the batch process has
        already finished it must be started again.
      operationId: restartBatchTileById
      tags:
        - batch_tile
      parameters:
        - $ref: '#/components/parameters/BatchRequestId'
        - $ref: '#/components/parameters/BatchTileId'
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
  /api/v1/batch/tilinggrids:
    get:
      summary: Get properties of all supported tiling grids
      operationId: getBatchTilingGridsProperties
      tags:
        - batch_tiling_grid
      parameters:
        - $ref: '#/components/parameters/SearchBeanCount'
        - $ref: '#/components/parameters/SearchBeanViewtoken'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TilingGridDescriptor'
                  links:
                    $ref: '#/components/schemas/View'
        '401':
          $ref: '#/components/responses/401'
      security:
        - OAuth2: []
  /api/v1/batch/tilinggrids/{id}:
    get:
      summary: Get properties of a single tiling grid
      operationId: getBatchTilingGridProperties
      tags:
        - batch_tiling_grid
      parameters:
        - $ref: '#/components/parameters/BatchTilinggridsId'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TilingGridDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - OAuth2: []
  /api/v1/dataimport/search:
    post:
      summary: Search data
      description: Search data with Process API-like interface
      operationId: dataImport_searchData
      tags:
        - dataimport_search
      parameters:
        - name: count
          description: Number of items to retrieve.
          in: query
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: provider-dependent
        - $ref: '#/components/parameters/SearchBeanViewtoken'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchQuery'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResults'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - OAuth2: []
  /api/v1/dataimport/nativesearch:
    post:
      summary: Native search
      description: >
        Proxy search. All the fields not listed as <span
        style="color:red">required</span> are passed verbatim to the data
        provider's search API, and the result from the latter is returned
        verbatim.
      operationId: dataImport_nativeSearch
      tags:
        - dataimport_search
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NativeSearchQuery'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResults'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      security:
        - OAuth2: []
  /api/v1/dataimport/collections/{collectionId}/products/{productId}/thumbnail:
    get:
      summary: Get thumbnail of data product
      description: Get a scaled-down, non-geolocated, non-clipped image of the data product
      operationId: dataImport_getProductThumbnail
      tags:
        - dataimport_product
      parameters:
        - $ref: '#/components/parameters/TpdiCollectionId'
        - name: productId
          description: >-
            ID of the product to get thumbnail of, typically returned by a
            previous search
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response (image)
      security:
        - OAuth2: []
  /api/v1/dataimport/orders:
    post:
      summary: Create an order
      description: >
        Create a non-confirmed data order object, equivalent to a quote. After
        creation you can review the contents of the order and its quota
        requirements, and then choose to confirm it or not.


        Data can be ordered by specifying a query (all items matching the query
        will be ordered) or item IDs (the specified items will be ordered).
      operationId: dataImport_createOrder
      tags:
        - dataimport_order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        '200':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
    get:
      summary: Query orders
      operationId: dataImport_getOrders
      tags:
        - dataimport_order
      parameters:
        - $ref: '#/components/parameters/OrderStatus'
        - name: collectionId
          description: Filter orders by collectionId. Omit to get all orders.
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/SearchBeanCount'
        - $ref: '#/components/parameters/SearchBeanViewtoken'
        - $ref: '#/components/parameters/SearchBeanSearch'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  links:
                    $ref: '#/components/schemas/View'
        '401':
          $ref: '#/components/responses/401'
      security:
        - OAuth2: []
  /api/v1/dataimport/orders/{orderId}:
    get:
      summary: Get an order
      operationId: dataImport_getOrder
      tags:
        - dataimport_order
      parameters:
        - $ref: '#/components/parameters/OrderId'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
    delete:
      summary: Delete an order
      operationId: dataImport_deleteOrder
      tags:
        - dataimport_order
      parameters:
        - $ref: '#/components/parameters/OrderId'
      responses:
        '204':
          description: Successful response - order deleted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          description: >-
            Conflict - order cannot be deleted because it is currently being
            processed.
      security:
        - OAuth2: []
  /api/v1/dataimport/orders/{orderId}/confirm:
    post:
      summary: Confirm an order
      description: >
        Confirm the order and start executing it. Requires sufficient quota for
        the order. Only orders with status CREATED can be confirmed.
      operationId: dataImport_confirmOrder
      tags:
        - dataimport_order
      parameters:
        - $ref: '#/components/parameters/OrderId'
      responses:
        '200':
          description: Successful response - order confirmed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/401'
        '403':
          description: Insufficient quota for the order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuotaExceededError'
        '409':
          description: >-
            Conflict - order cannot be confirmed because its status is not
            CREATED.
      security:
        - OAuth2: []
  /api/v1/dataimport/orders/{orderId}/deliveries:
    get:
      summary: Get order deliveries
      operationId: dataImport_getOrderDeliveries
      tags:
        - dataimport_delivery
      parameters:
        - $ref: '#/components/parameters/OrderId'
        - $ref: '#/components/parameters/DeliveryStatus'
        - $ref: '#/components/parameters/SearchBeanCount'
        - $ref: '#/components/parameters/SearchBeanViewtoken'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Delivery'
                  links:
                    $ref: '#/components/schemas/View'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
  /api/v1/dataimport/orders/{orderId}/deliveries/{deliveryId}:
    get:
      summary: Get an order delivery
      operationId: dataImport_getOrderDelivery
      tags:
        - dataimport_delivery
      parameters:
        - $ref: '#/components/parameters/OrderId'
        - $ref: '#/components/parameters/DeliveryId'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
  /api/v1/dataimport/quotas:
    get:
      summary: Get import quotas
      description: >-
        Get the list of user's data import quotas for all providers and
        collections
      operationId: dataImport_getQuotas
      tags:
        - dataimport_quota
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Quota'
        '401':
          $ref: '#/components/responses/401'
      security:
        - OAuth2: []
  /api/v1/dataimport/quotas/{collectionId}:
    get:
      summary: Get import quota
      description: Get the user's data import quota for the specified collection
      operationId: dataImport_getQuota
      tags:
        - dataimport_quota
      parameters:
        - $ref: '#/components/parameters/TpdiCollectionId'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quota'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
  /api/v1/byoc/collections/{collectionId}/tiles:
    post:
      summary: Create a tile
      operationId: createByocCollectionTile
      tags:
        - byoc_tile
      parameters:
        - $ref: '#/components/parameters/ByocCollectionId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BYOCTile'
      responses:
        '201':
          description: Tile created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BYOCTileResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '409':
          $ref: '#/components/responses/409'
      security:
        - OAuth2: []
    get:
      summary: Get collection tiles
      operationId: getByocCollectionTiles
      tags:
        - byoc_tile
      parameters:
        - $ref: '#/components/parameters/ByocCollectionId'
        - name: count
          description: Number of items to retrieve.
          in: query
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
        - $ref: '#/components/parameters/SearchBeanViewtoken'
        - name: sort
          description: >-
            Get tiles sorted by created date or path, and either in ascending or
            descending order.
          in: query
          schema:
            type: string
            enum:
              - created:asc
              - created:desc
              - path:asc
              - path:desc
        - name: path
          description: >-
            Get the tile with the exact path. Returns a single tile or no tile,
            if there's none with given path.
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BYOCTilesResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      security:
        - OAuth2: []
  /api/v1/byoc/collections/{collectionId}/tiles/{tileId}:
    get:
      summary: Get a tile
      operationId: getByocCollectionTileById
      tags:
        - byoc_tile
      parameters:
        - $ref: '#/components/parameters/ByocCollectionId'
        - $ref: '#/components/parameters/ByocTileId'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BYOCTileResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
    put:
      summary: Update a tile
      operationId: updateByocCollectionTileById
      tags:
        - byoc_tile
      parameters:
        - $ref: '#/components/parameters/ByocCollectionId'
        - $ref: '#/components/parameters/ByocTileId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BYOCTileUpdatePayload'
      responses:
        '204':
          description: Tile updated
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
      security:
        - OAuth2: []
    delete:
      summary: Delete a tile
      operationId: deleteByocCollectionTileById
      tags:
        - byoc_tile
      parameters:
        - $ref: '#/components/parameters/ByocCollectionId'
        - $ref: '#/components/parameters/ByocTileId'
      responses:
        '204':
          description: Tile deleted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
  /api/v1/byoc/collections:
    post:
      summary: Create a collection
      operationId: createByocCollection
      tags:
        - byoc_collection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BYOCCollection'
      responses:
        '201':
          description: Collection created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BYOCCollectionResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '409':
          $ref: '#/components/responses/409'
      security:
        - OAuth2: []
    get:
      summary: Query collections
      operationId: getByocCollections
      tags:
        - byoc_collection
      parameters:
        - name: count
          description: Number of items to retrieve.
          in: query
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
        - $ref: '#/components/parameters/SearchBeanViewtoken'
        - $ref: '#/components/parameters/SearchBeanSearch'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BYOCCollectionsResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      security:
        - OAuth2: []
  /api/v1/byoc/collections/{collectionId}:
    get:
      summary: Get a collection
      operationId: getByocCollectionById
      tags:
        - byoc_collection
      parameters:
        - $ref: '#/components/parameters/ByocCollectionId'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BYOCCollectionResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
    put:
      summary: Update a collection
      operationId: updateByocCollectionById
      tags:
        - byoc_collection
      parameters:
        - $ref: '#/components/parameters/ByocCollectionId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BYOCCollectionUpdatePayload'
      responses:
        '204':
          description: Collection updated
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
      security:
        - OAuth2: []
    delete:
      summary: Delete a collection
      operationId: deleteByocCollectionById
      tags:
        - byoc_collection
      parameters:
        - $ref: '#/components/parameters/ByocCollectionId'
      responses:
        '204':
          description: Collection deleted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
  /api/v1/byoc/collections/{collectionId}/copyTiles:
    post:
      summary: Copy collection tiles
      description: >
        Copies ingested tiles from one collection to another, but only those
        whose path isn't present in the target collection.


        You need to have access to both source and target collections, and
        target collection needs to have either the same band names and types, or
        it should have no bands.
      operationId: copyByocCollectionTiles
      tags:
        - byoc_collection
      parameters:
        - $ref: '#/components/parameters/ByocCollectionId'
        - name: toCollection
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Tiles copied
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
  /configuration/v1/datasets/{datasetType}/dataproducts:
    get:
      tags:
        - configuration_data_product
      summary: Search data product
      operationId: getDataProducts
      parameters:
        - $ref: '#/components/parameters/ConfigurationDatasetType'
        - $ref: '#/components/parameters/SearchBeanSearch'
        - $ref: '#/components/parameters/SearchBeanCount'
        - $ref: '#/components/parameters/SearchBeanViewtoken'
        - $ref: '#/components/parameters/SearchBeanSort'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataProduct'
      security:
        - OAuth2: []
  /configuration/v1/datasets/{datasetType}/dataproducts/{id}:
    get:
      tags:
        - configuration_data_product
      summary: Get data product
      description: Get an existing data product
      operationId: getDataProduct
      parameters:
        - $ref: '#/components/parameters/ConfigurationDatasetType'
        - $ref: '#/components/parameters/ConfigurationDataproductId'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataProduct'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
  /configuration/v1/datasets:
    get:
      tags:
        - configuration_dataset
      summary: Get all datasets
      description: Get all existing datasets
      operationId: getAllDatasetDescriptors
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DatasetDescriptor'
      security:
        - OAuth2: []
  /configuration/v1/datasets/{datasetType}:
    get:
      tags:
        - configuration_dataset
      summary: Get dataset
      description: Get an existing dataset
      operationId: getDatasetDescriptor
      parameters:
        - $ref: '#/components/parameters/ConfigurationDatasetType'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetDescriptor'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
  /configuration/v1/datasets/{datasetId}/sources:
    get:
      tags:
        - configuration_dataset_source
      summary: Get dataset sources
      description: Get all existing dataset sources
      operationId: getSourceDescriptors
      parameters:
        - $ref: '#/components/parameters/ConfigurationDatasetId'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DatasetSourceDescriptor'
      security:
        - OAuth2: []
  /configuration/v1/datasets/{datasetId}/sources/{id}:
    get:
      tags:
        - configuration_dataset_source
      summary: Get dataset source
      description: Get an existing dataset source
      operationId: getSourceDescriptor
      parameters:
        - $ref: '#/components/parameters/ConfigurationDatasetId'
        - $ref: '#/components/parameters/ConfigurationDatasetSourceId'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetSourceDescriptor'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
  /configuration/v1/wms/instances/{instanceId}/userData:
    get:
      tags:
        - configuration_instance_user_data
      summary: Get instance user data
      description: Get an existing WMS instance user data
      operationId: getInstanceUserData
      parameters:
        - $ref: '#/components/parameters/WmsInstanceId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WmsInstanceUserData'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
    put:
      tags:
        - configuration_instance_user_data
      summary: Update instance user data
      description: Update an existing WMS instance user data
      operationId: updateInstanceUserData
      parameters:
        - $ref: '#/components/parameters/WmsInstanceId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WmsUserDataPayload'
      responses:
        '200':
          description: Successful operation
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
    post:
      tags:
        - configuration_instance_user_data
      summary: Create instance user data
      description: Create a new WMS instance user data
      operationId: createInstanceUserData
      parameters:
        - $ref: '#/components/parameters/WmsInstanceId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WmsUserDataPayload'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WmsInstanceUserData'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
    delete:
      tags:
        - configuration_instance_user_data
      summary: Delete instance user data
      description: Delete an existing WMS instance user data
      operationId: deleteInstanceUserData
      parameters:
        - $ref: '#/components/parameters/WmsInstanceId'
      responses:
        '200':
          description: Successful operation
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
  /configuration/v1/wms/instances/{instanceId}/{layerId}/userData:
    get:
      tags:
        - configuration_layer_user_data
      summary: Get layer user data
      description: Get an existing WMS layer user data
      operationId: getWmsLayerUserData
      parameters:
        - $ref: '#/components/parameters/WmsInstanceId'
        - $ref: '#/components/parameters/WmsLayerId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WmsLayerUserData'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
    put:
      tags:
        - configuration_layer_user_data
      summary: Update layer user data
      description: Update an existing layer user data
      operationId: updateLayerUserData
      parameters:
        - $ref: '#/components/parameters/WmsInstanceId'
        - $ref: '#/components/parameters/WmsLayerId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WmsUserDataPayload'
      responses:
        '200':
          description: Successful operation
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
    post:
      tags:
        - configuration_layer_user_data
      summary: Create layer user data
      description: Create a new WMS layer user data
      operationId: createWmsLayerUserData
      parameters:
        - $ref: '#/components/parameters/WmsInstanceId'
        - $ref: '#/components/parameters/WmsLayerId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WmsUserDataPayload'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WmsLayerUserData'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
    delete:
      tags:
        - configuration_layer_user_data
      summary: Delete layer user data
      description: Delete an existing WMS layer user data
      operationId: deleteLayerUserData
      parameters:
        - $ref: '#/components/parameters/WmsInstanceId'
        - $ref: '#/components/parameters/WmsLayerId'
      responses:
        '200':
          description: Successful operation
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
  /configuration/v1/wms/instances/{instanceId}/layers:
    get:
      tags:
        - configuration_layer
      summary: Get layers
      description: Get all WMS layers for a WMS instance
      operationId: getWmsLayers
      parameters:
        - $ref: '#/components/parameters/WmsInstanceId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WmsLayer'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
    post:
      tags:
        - configuration_layer
      summary: Create layer
      description: Create a new WMS layer
      operationId: createWmsLayer
      parameters:
        - $ref: '#/components/parameters/WmsInstanceId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WmsLayer'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WmsLayer'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
      security:
        - OAuth2: []
  /configuration/v1/wms/instances/{instanceId}/layers/{layerId}:
    get:
      tags:
        - configuration_layer
      summary: Get layer
      description: Get an existing WMS layer
      operationId: getWmsLayer
      parameters:
        - $ref: '#/components/parameters/WmsInstanceId'
        - $ref: '#/components/parameters/WmsLayerId'
        - name: expand
          description: Add styles to response
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WmsLayer'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
    put:
      tags:
        - configuration_layer
      summary: Update layer
      description: Update an existing WMS layer
      operationId: updateWmsLayer
      parameters:
        - $ref: '#/components/parameters/WmsInstanceId'
        - $ref: '#/components/parameters/WmsLayerId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WmsLayer'
      responses:
        '200':
          description: Successful operation
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
    delete:
      tags:
        - configuration_layer
      summary: Delete layer
      description: Delete an existing WMS layer
      operationId: deleteWmsLayer
      parameters:
        - $ref: '#/components/parameters/WmsInstanceId'
        - $ref: '#/components/parameters/WmsLayerId'
      responses:
        '200':
          description: Successful operation
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
  /configuration/v1/wms/instances:
    get:
      tags:
        - configuration_instance
      summary: Get instances
      description: Returns user's WMS instances
      operationId: searchWmsInstances
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WmsInstance'
        '403':
          $ref: '#/components/responses/403'
      security:
        - OAuth2: []
    post:
      tags:
        - configuration_instance
      summary: Create instance
      description: Create a new WMS instance
      operationId: createWmsInstance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WmsInstance'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WmsInstance'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '409':
          $ref: '#/components/responses/409'
      security:
        - OAuth2: []
  /configuration/v1/wms/instances/{instanceId}:
    get:
      tags:
        - configuration_instance
      summary: Get instance
      description: Get an existing WMS instance
      operationId: getWmsInstance
      parameters:
        - $ref: '#/components/parameters/WmsInstanceId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WmsInstance'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
    put:
      tags:
        - configuration_instance
      summary: Update instance
      description: Update an existing WMS instance
      operationId: updateWmsInstance
      parameters:
        - $ref: '#/components/parameters/WmsInstanceId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WmsInstance'
      responses:
        '200':
          description: Successful operation
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
    delete:
      tags:
        - configuration_instance
      summary: Delete instance
      description: Delete an existing WMS instance
      operationId: deleteWmsInstance
      parameters:
        - $ref: '#/components/parameters/WmsInstanceId'
      responses:
        '200':
          description: Successful operation
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
  /api/v1/metadata/location:
    get:
      summary: List all locations
      description: >-
        List all available Sentinel Hub deployment locations including their
        metadata
      operationId: metadata_locations
      tags:
        - metadata_location
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
        '401':
          $ref: '#/components/responses/401'
      security:
        - OAuth2: []
  /api/v1/metadata/location/{locationId}:
    get:
      summary: Speficic Location
      description: Metadata on specific deployment location
      operationId: metadata_location
      tags:
        - metadata_location
      parameters:
        - name: locationId
          in: path
          required: true
          schema:
            description: Sentinel Hub deployment location identifier
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
  /api/v1/metadata/collection/CUSTOM/{collectionId}:
    get:
      summary: BYOC Collection
      description: Metadata about specific BYOC collection
      operationId: metadata_byoc_id
      tags:
        - metadata_collection
      parameters:
        - name: collectionId
          in: path
          required: true
          schema:
            description: BYOC Collection identifier
            type: uuid
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BYOCCollectionMetadata'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - OAuth2: []
  /api/v1/catalog:
    get:
      tags:
        - Capabilities
      summary: landing page
      description: |-
        Returns the root STAC Catalog or STAC Collection that is the entry point
        for users to browse with STAC Browser or for search engines to crawl.
        This can either return a single STAC Collection or more commonly a STAC
        catalog.

        The landing page provides links to the API definition, the conformance
        statements, the collections and sub-catalogs.
      operationId: getLandingPage
      responses:
        '200':
          $ref: '#/components/responses/LandingPage'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/v1/catalog/conformance:
    get:
      tags:
        - Capabilities
      summary: information about specifications that this API conforms to
      description: |-
        A list of all conformance classes specified in a standard that the
        server conforms to.
      operationId: getConformanceDeclaration
      responses:
        '200':
          $ref: '#/components/responses/ConformanceDeclaration'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/v1/catalog/collections:
    get:
      tags:
        - Capabilities
      summary: the feature collections in the dataset
      operationId: getCollections
      responses:
        '200':
          $ref: '#/components/responses/Collections'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/v1/catalog/collections/{collectionId}:
    get:
      tags:
        - Capabilities
      summary: describe the feature collection with id `collectionId`
      operationId: describeCollection
      parameters:
        - $ref: '#/components/parameters/collectionId'
      responses:
        '200':
          $ref: '#/components/responses/Collection'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/v1/catalog/collections/{collectionId}/items:
    get:
      tags:
        - Data
      summary: fetch features
      description: |-
        Fetch features of the feature collection with id `collectionId`.

        Every feature in a dataset belongs to a collection. A dataset may
        consist of multiple feature collections. A feature collection is often a
        collection of features of a similar type, based on a common schema.

        Use content negotiation to request HTML or GeoJSON.
      operationId: getFeatures
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/bbox'
        - $ref: '#/components/parameters/datetime'
      responses:
        '200':
          $ref: '#/components/responses/Features'
        '400':
          $ref: '#/components/responses/InvalidParameter'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/v1/catalog/collections/{collectionId}/items/{featureId}:
    get:
      tags:
        - Data
      summary: fetch a single feature
      description: |-
        Fetch the feature with id `featureId` in the feature collection
        with id `collectionId`.

        Use content negotiation to request HTML or GeoJSON.
      operationId: getFeature
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/featureId'
      responses:
        '200':
          $ref: '#/components/responses/Feature'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/v1/catalog/search:
    get:
      summary: Search STAC items with simple filtering.
      description: |-
        Retrieve Items matching filters. Intended as a shorthand API for simple
        queries.

        This method is optional, but you MUST implement `POST /search` if you
        want to implement this method.

        If this endpoint is implemented on a server, it is required to add a
        link referring to this endpoint with `rel` set to `search` to the
        `links` array in `GET /`. As `GET` is the default method, the `method`
        may not be set explicitly in the link.
      operationId: getSearchSTAC
      tags:
        - STAC
      parameters:
        - $ref: '#/components/parameters/bbox'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/ids'
        - $ref: '#/components/parameters/collectionsArray'
        - $ref: '#/components/parameters/next'
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: A feature collection.
          content:
            application/geo+json:
              schema:
                $ref: '#/components/schemas/itemCollection'
            text/html:
              schema:
                type: string
        default:
          description: An error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
    post:
      summary: Search STAC items with full-featured filtering.
      description: |-
        retrieve items matching filters. Intended as the standard, full-featured
        query API.

        This method is mandatory to implement if `GET /search` is implemented.
        If this endpoint is implemented on a server, it is required to add a
        link referring to this endpoint with `rel` set to `search` and `method`
        set to `POST` to the `links` array in `GET /`.
      operationId: postSearchSTAC
      tags:
        - STAC
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/searchBody'
      responses:
        '200':
          description: A feature collection.
          content:
            application/geo+json:
              schema:
                $ref: '#/components/schemas/itemCollection'
            text/html:
              schema:
                type: string
        default:
          description: An error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
